{
  "type": "Program",
  "body": [
    {
      "type": "ExpressionStatement",
      "expression": {
        "type": "CallExpression",
        "callee": {
          "type": "Identifier",
          "name": "define",
          "range": [
            0,
            6
          ],
          "loc": {
            "start": {
              "line": 1,
              "column": 0
            },
            "end": {
              "line": 1,
              "column": 6
            }
          }
        },
        "arguments": [
          {
            "type": "FunctionExpression",
            "id": null,
            "params": [],
            "body": {
              "type": "BlockStatement",
              "body": [
                {
                  "type": "ExpressionStatement",
                  "expression": {
                    "type": "CallExpression",
                    "callee": {
                      "type": "MemberExpression",
                      "computed": false,
                      "object": {
                        "type": "Identifier",
                        "name": "mocha",
                        "range": [
<<<<<<< HEAD
                          24,
                          29
=======
                          25,
                          30
>>>>>>> release_branch
                        ],
                        "loc": {
                          "start": {
                            "line": 2,
                            "column": 4
                          },
                          "end": {
                            "line": 2,
                            "column": 9
                          }
                        }
                      },
                      "property": {
                        "type": "Identifier",
                        "name": "setup",
                        "range": [
<<<<<<< HEAD
                          30,
                          35
=======
                          31,
                          36
>>>>>>> release_branch
                        ],
                        "loc": {
                          "start": {
                            "line": 2,
                            "column": 10
                          },
                          "end": {
                            "line": 2,
                            "column": 15
                          }
                        }
                      },
                      "range": [
<<<<<<< HEAD
                        24,
                        35
=======
                        25,
                        36
>>>>>>> release_branch
                      ],
                      "loc": {
                        "start": {
                          "line": 2,
                          "column": 4
                        },
                        "end": {
                          "line": 2,
                          "column": 15
                        }
                      }
                    },
                    "arguments": [
                      {
                        "type": "Literal",
                        "value": "bdd",
                        "raw": "'bdd'",
                        "range": [
<<<<<<< HEAD
                          36,
                          41
=======
                          37,
                          42
>>>>>>> release_branch
                        ],
                        "loc": {
                          "start": {
                            "line": 2,
                            "column": 16
                          },
                          "end": {
                            "line": 2,
                            "column": 21
                          }
                        }
                      }
                    ],
                    "range": [
<<<<<<< HEAD
                      24,
                      42
=======
                      25,
                      43
>>>>>>> release_branch
                    ],
                    "loc": {
                      "start": {
                        "line": 2,
                        "column": 4
                      },
                      "end": {
                        "line": 2,
                        "column": 22
                      }
                    }
                  },
                  "range": [
<<<<<<< HEAD
                    24,
                    43
=======
                    25,
                    44
>>>>>>> release_branch
                  ],
                  "loc": {
                    "start": {
                      "line": 2,
                      "column": 4
                    },
                    "end": {
                      "line": 2,
                      "column": 23
                    }
                  },
                  "trailingComments": [
                    {
                      "type": "Block",
                      "value": "* @test {InternalOpenGateAPI#bundlesBuilder()} ",
                      "range": [
<<<<<<< HEAD
                        48,
                        99
=======
                        50,
                        101
>>>>>>> release_branch
                      ],
                      "loc": {
                        "start": {
                          "line": 3,
                          "column": 4
                        },
                        "end": {
                          "line": 3,
                          "column": 55
                        }
                      }
                    }
                  ]
                },
                {
                  "type": "ExpressionStatement",
                  "expression": {
                    "type": "CallExpression",
                    "callee": {
                      "type": "Identifier",
                      "name": "describe",
                      "range": [
<<<<<<< HEAD
                        104,
                        112
=======
                        107,
                        115
>>>>>>> release_branch
                      ],
                      "loc": {
                        "start": {
                          "line": 4,
                          "column": 4
                        },
                        "end": {
                          "line": 4,
                          "column": 12
                        }
                      }
                    },
                    "arguments": [
                      {
                        "type": "Literal",
                        "value": "Check funcionality bundles module:",
                        "raw": "'Check funcionality bundles module:'",
                        "range": [
<<<<<<< HEAD
                          113,
                          149
=======
                          116,
                          152
>>>>>>> release_branch
                        ],
                        "loc": {
                          "start": {
                            "line": 4,
                            "column": 13
                          },
                          "end": {
                            "line": 4,
                            "column": 49
                          }
                        }
                      },
                      {
                        "type": "FunctionExpression",
                        "id": null,
                        "params": [],
                        "body": {
                          "type": "BlockStatement",
                          "body": [
                            {
                              "type": "VariableDeclaration",
                              "declarations": [
                                {
                                  "type": "VariableDeclarator",
                                  "id": {
                                    "type": "Identifier",
                                    "name": "bundle",
                                    "range": [
<<<<<<< HEAD
                                      176,
                                      182
=======
                                      180,
                                      186
>>>>>>> release_branch
                                    ],
                                    "loc": {
                                      "start": {
                                        "line": 5,
                                        "column": 12
                                      },
                                      "end": {
                                        "line": 5,
                                        "column": 18
                                      }
                                    }
                                  },
                                  "init": null,
                                  "range": [
<<<<<<< HEAD
                                    176,
                                    182
=======
                                    180,
                                    186
>>>>>>> release_branch
                                  ],
                                  "loc": {
                                    "start": {
                                      "line": 5,
                                      "column": 12
                                    },
                                    "end": {
                                      "line": 5,
                                      "column": 18
                                    }
                                  }
                                }
                              ],
                              "kind": "var",
                              "range": [
<<<<<<< HEAD
                                172,
                                183
=======
                                176,
                                187
>>>>>>> release_branch
                              ],
                              "loc": {
                                "start": {
                                  "line": 5,
                                  "column": 8
                                },
                                "end": {
                                  "line": 5,
                                  "column": 19
                                }
                              }
                            },
                            {
                              "type": "ExpressionStatement",
                              "expression": {
                                "type": "CallExpression",
                                "callee": {
                                  "type": "Identifier",
                                  "name": "before",
                                  "range": [
<<<<<<< HEAD
                                    192,
                                    198
=======
                                    197,
                                    203
>>>>>>> release_branch
                                  ],
                                  "loc": {
                                    "start": {
                                      "line": 6,
                                      "column": 8
                                    },
                                    "end": {
                                      "line": 6,
                                      "column": 14
                                    }
                                  }
                                },
                                "arguments": [
                                  {
                                    "type": "FunctionExpression",
                                    "id": null,
                                    "params": [],
                                    "body": {
                                      "type": "BlockStatement",
                                      "body": [
                                        {
                                          "type": "ExpressionStatement",
                                          "expression": {
                                            "type": "AssignmentExpression",
                                            "operator": "=",
                                            "left": {
                                              "type": "Identifier",
                                              "name": "bundle",
                                              "range": [
<<<<<<< HEAD
                                                224,
                                                230
=======
                                                230,
                                                236
>>>>>>> release_branch
                                              ],
                                              "loc": {
                                                "start": {
                                                  "line": 7,
                                                  "column": 12
                                                },
                                                "end": {
                                                  "line": 7,
                                                  "column": 18
                                                }
                                              }
                                            },
                                            "right": {
                                              "type": "CallExpression",
                                              "callee": {
                                                "type": "MemberExpression",
                                                "computed": false,
                                                "object": {
                                                  "type": "Identifier",
                                                  "name": "ogapi",
                                                  "range": [
<<<<<<< HEAD
                                                    233,
                                                    238
=======
                                                    239,
                                                    244
>>>>>>> release_branch
                                                  ],
                                                  "loc": {
                                                    "start": {
                                                      "line": 7,
                                                      "column": 21
                                                    },
                                                    "end": {
                                                      "line": 7,
                                                      "column": 26
                                                    }
                                                  }
                                                },
                                                "property": {
                                                  "type": "Identifier",
                                                  "name": "bundlesBuilder",
                                                  "range": [
<<<<<<< HEAD
                                                    239,
                                                    253
=======
                                                    245,
                                                    259
>>>>>>> release_branch
                                                  ],
                                                  "loc": {
                                                    "start": {
                                                      "line": 7,
                                                      "column": 27
                                                    },
                                                    "end": {
                                                      "line": 7,
                                                      "column": 41
                                                    }
                                                  }
                                                },
                                                "range": [
<<<<<<< HEAD
                                                  233,
                                                  253
=======
                                                  239,
                                                  259
>>>>>>> release_branch
                                                ],
                                                "loc": {
                                                  "start": {
                                                    "line": 7,
                                                    "column": 21
                                                  },
                                                  "end": {
                                                    "line": 7,
                                                    "column": 41
                                                  }
                                                }
                                              },
                                              "arguments": [],
                                              "range": [
<<<<<<< HEAD
                                                233,
                                                255
=======
                                                239,
                                                261
>>>>>>> release_branch
                                              ],
                                              "loc": {
                                                "start": {
                                                  "line": 7,
                                                  "column": 21
                                                },
                                                "end": {
                                                  "line": 7,
                                                  "column": 43
                                                }
                                              }
                                            },
                                            "range": [
<<<<<<< HEAD
                                              224,
                                              255
=======
                                              230,
                                              261
>>>>>>> release_branch
                                            ],
                                            "loc": {
                                              "start": {
                                                "line": 7,
                                                "column": 12
                                              },
                                              "end": {
                                                "line": 7,
                                                "column": 43
                                              }
                                            }
                                          },
                                          "range": [
<<<<<<< HEAD
                                            224,
                                            256
=======
                                            230,
                                            262
>>>>>>> release_branch
                                          ],
                                          "loc": {
                                            "start": {
                                              "line": 7,
                                              "column": 12
                                            },
                                            "end": {
                                              "line": 7,
                                              "column": 44
                                            }
                                          }
                                        }
                                      ],
                                      "range": [
<<<<<<< HEAD
                                        210,
                                        266
=======
                                        215,
                                        273
>>>>>>> release_branch
                                      ],
                                      "loc": {
                                        "start": {
                                          "line": 6,
                                          "column": 26
                                        },
                                        "end": {
                                          "line": 8,
                                          "column": 9
                                        }
                                      }
                                    },
                                    "generator": false,
                                    "expression": false,
                                    "range": [
<<<<<<< HEAD
                                      199,
                                      266
=======
                                      204,
                                      273
>>>>>>> release_branch
                                    ],
                                    "loc": {
                                      "start": {
                                        "line": 6,
                                        "column": 15
                                      },
                                      "end": {
                                        "line": 8,
                                        "column": 9
                                      }
                                    }
                                  }
                                ],
                                "range": [
<<<<<<< HEAD
                                  192,
                                  267
=======
                                  197,
                                  274
>>>>>>> release_branch
                                ],
                                "loc": {
                                  "start": {
                                    "line": 6,
                                    "column": 8
                                  },
                                  "end": {
                                    "line": 8,
                                    "column": 10
                                  }
                                }
                              },
                              "range": [
<<<<<<< HEAD
                                192,
                                268
=======
                                197,
                                275
>>>>>>> release_branch
                              ],
                              "loc": {
                                "start": {
                                  "line": 6,
                                  "column": 8
                                },
                                "end": {
                                  "line": 8,
                                  "column": 11
                                }
                              },
                              "trailingComments": [
                                {
                                  "type": "Block",
                                  "value": "* @test {InternalOpenGateAPI#bundlesBuilder} ",
                                  "range": [
<<<<<<< HEAD
                                    277,
                                    326
=======
                                    285,
                                    334
>>>>>>> release_branch
                                  ],
                                  "loc": {
                                    "start": {
                                      "line": 9,
                                      "column": 8
                                    },
                                    "end": {
                                      "line": 9,
                                      "column": 57
                                    }
                                  }
                                },
                                {
                                  "type": "Block",
<<<<<<< HEAD
                                  "value": "describe('Check basic parameters:', function() {\n\n            it('Name is not a String', function() {\n                assert.throws(function() {\n                    ogapi.bundlesBuilder().withName(11);\n                }, \"Parameter name must be a string and has a maximum length of 255\");\n\n            });\n\n            it('version is not a String', function() {\n                assert.throws(function() {\n                    ogapi.bundlesBuilder().withVersion(1);\n                }, \"Parameter version must be a string and has a maximum length of 50\");\n\n            });\n\n            it('Hardware is not a String', function() {\n                assert.throws(function() {\n                    ogapi.bundlesBuilder().withHardware(1);\n                }, \"Parameter hardware must be a string\");\n\n            });\n\n            it('workgroup is not a String', function() {\n                assert.throws(function() {\n                    ogapi.bundlesBuilder().withWorkgroup(1);\n                }, \"Parameter workgroup must be a string\");\n\n            });\n\n            it('description is not a String', function() {\n                assert.throws(function() {\n                    ogapi.bundlesBuilder().withDescription(1);\n                }, \"Parameter description must be a string and has a maximum length of 250\");\n\n            });\n\n            it('UserNotes is not a String', function() {\n                assert.throws(function() {\n                    ogapi.bundlesBuilder().withUserNotes(1);\n                }, \"Parameter notes must be a string and has a maximum length of 250\");\n\n            });\n\n            it('POSTACTION is not an Array', function() {\n                assert.throws(function() {\n                    ogapi.bundlesBuilder().withPreaction(\"\");\n                }, \"Parameter preaction must be typeof Array\");\n\n            });\n\n            it('POSTACTION does not have at least one element', function() {\n                assert.doesNotThrow(function() {\n                    ogapi.bundlesBuilder().withPreaction([]);\n                });\n\n            });\n\n            it('POSTACTION does not have correct Elements', function() {\n                assert.throws(function() {\n                    ogapi.bundlesBuilder().withPreaction([\"dd\"]);\n                }, 'Any action into parameter preaction is not allowed. Parameter value <\\'[\"dd\"]\\'>, preaction allowed <\\'[\"HARDWARE_RESET\",\"SOFTWARE_RESET\",\"COMMS_DOWN\",\"COMMS_UP\",\"COMMS_RESET\"]\\'>');\n\n            });\n\n            it('POSTACTION have correct Elements', function() {\n                assert.doesNotThrow(function() {\n                    ogapi.bundlesBuilder().withPreaction([\"HARDWARE_RESET\", \"SOFTWARE_RESET\", \"COMMS_DOWN\", \"COMMS_UP\", \"COMMS_RESET\"]);\n                });\n            });\n\n\n            it('Required parameters', function() {\n                assert.throws(function() {\n                    ogapi.bundlesBuilder().create();\n                }, \"Parameters name, version, hardware, workgroup  must be defined\");\n            });\n\n            it('Check parameters type', function() {\n                assert.throws(function() {\n                    ogapi.bundlesBuilder().withName(222);\n                }, \"Parameter name must be a string\");\n            });\n        });\n        describe('Create a Bundle:', function() {\n\n            before(function() {\n                bundle.withName('bundle_testing').withVersion('V1').withWorkgroup('baseWorkGroup');\n            });\n\n            it('Check basic parameters', function() {\n                assert.throws(function() {\n                    bundle.create();\n                }, \"Parameters name, version, hardware, workgroup  must be defined\");\n            });\n\n            it('Create a bundle without Hardware', function() {\n                assert.throws(function() {\n                    bundle.create();\n                }, \"Parameters name, version, hardware, workgroup  must be defined\");\n            });\n\n            it('Create a bundle', function() {\n                assert.doesNotThrow(function() {\n                    bundle.withHardware(\"OWA21\").create();\n                });\n            });\n            it('Activate a bundle', function() {\n                assert.doesNotThrow(function() {\n                    bundle.activate();\n                });\n            });\n            /*\n             it('Delete a bundle', function() {\n                assert.doesNotThrow(function() {\n                    bundle.delete();\n                });\n                \n            });",
                                  "range": [
                                    335,
                                    4827
=======
                                  "value": "describe('Check basic parameters:', function() {\r\n\r\n            it('Name is not a String', function() {\r\n                assert.throws(function() {\r\n                    ogapi.bundlesBuilder().withName(11);\r\n                }, \"Parameter name must be a string and has a maximum length of 255\");\r\n\r\n            });\r\n\r\n            it('version is not a String', function() {\r\n                assert.throws(function() {\r\n                    ogapi.bundlesBuilder().withVersion(1);\r\n                }, \"Parameter version must be a string and has a maximum length of 50\");\r\n\r\n            });\r\n\r\n            it('Hardware is not a String', function() {\r\n                assert.throws(function() {\r\n                    ogapi.bundlesBuilder().withHardware(1);\r\n                }, \"Parameter hardware must be a string\");\r\n\r\n            });\r\n\r\n            it('workgroup is not a String', function() {\r\n                assert.throws(function() {\r\n                    ogapi.bundlesBuilder().withWorkgroup(1);\r\n                }, \"Parameter workgroup must be a string\");\r\n\r\n            });\r\n\r\n            it('description is not a String', function() {\r\n                assert.throws(function() {\r\n                    ogapi.bundlesBuilder().withDescription(1);\r\n                }, \"Parameter description must be a string and has a maximum length of 250\");\r\n\r\n            });\r\n\r\n            it('UserNotes is not a String', function() {\r\n                assert.throws(function() {\r\n                    ogapi.bundlesBuilder().withUserNotes(1);\r\n                }, \"Parameter notes must be a string and has a maximum length of 250\");\r\n\r\n            });\r\n\r\n            it('POSTACTION is not an Array', function() {\r\n                assert.throws(function() {\r\n                    ogapi.bundlesBuilder().withPreaction(\"\");\r\n                }, \"Parameter preaction must be typeof Array\");\r\n\r\n            });\r\n\r\n            it('POSTACTION does not have at least one element', function() {\r\n                assert.doesNotThrow(function() {\r\n                    ogapi.bundlesBuilder().withPreaction([]);\r\n                });\r\n\r\n            });\r\n\r\n            it('POSTACTION does not have correct Elements', function() {\r\n                assert.throws(function() {\r\n                    ogapi.bundlesBuilder().withPreaction([\"dd\"]);\r\n                }, 'Any action into parameter preaction is not allowed. Parameter value <\\'[\"dd\"]\\'>, preaction allowed <\\'[\"HARDWARE_RESET\",\"SOFTWARE_RESET\",\"COMMS_DOWN\",\"COMMS_UP\",\"COMMS_RESET\"]\\'>');\r\n\r\n            });\r\n\r\n            it('POSTACTION have correct Elements', function() {\r\n                assert.doesNotThrow(function() {\r\n                    ogapi.bundlesBuilder().withPreaction([\"HARDWARE_RESET\", \"SOFTWARE_RESET\", \"COMMS_DOWN\", \"COMMS_UP\", \"COMMS_RESET\"]);\r\n                });\r\n            });\r\n\r\n\r\n            it('Required parameters', function() {\r\n                assert.throws(function() {\r\n                    ogapi.bundlesBuilder().create();\r\n                }, \"Parameters name, version, hardware, workgroup  must be defined\");\r\n            });\r\n\r\n            it('Check parameters type', function() {\r\n                assert.throws(function() {\r\n                    ogapi.bundlesBuilder().withName(222);\r\n                }, \"Parameter name must be a string\");\r\n            });\r\n        });\r\n        describe('Create a Bundle:', function() {\r\n\r\n            before(function() {\r\n                bundle.withName('bundle_testing').withVersion('V1').withWorkgroup('baseWorkGroup');\r\n            });\r\n\r\n            it('Check basic parameters', function() {\r\n                assert.throws(function() {\r\n                    bundle.create();\r\n                }, \"Parameters name, version, hardware, workgroup  must be defined\");\r\n            });\r\n\r\n            it('Create a bundle without Hardware', function() {\r\n                assert.throws(function() {\r\n                    bundle.create();\r\n                }, \"Parameters name, version, hardware, workgroup  must be defined\");\r\n            });\r\n\r\n            it('Create a bundle', function() {\r\n                assert.doesNotThrow(function() {\r\n                    bundle.withHardware(\"OWA21\").create();\r\n                });\r\n            });\r\n            it('Activate a bundle', function() {\r\n                assert.doesNotThrow(function() {\r\n                    bundle.activate();\r\n                });\r\n            });\r\n            /*\r\n             it('Delete a bundle', function() {\r\n                assert.doesNotThrow(function() {\r\n                    bundle.delete();\r\n                });\r\n                \r\n            });",
                                  "range": [
                                    344,
                                    4954
>>>>>>> release_branch
                                  ],
                                  "loc": {
                                    "start": {
                                      "line": 10,
                                      "column": 8
                                    },
                                    "end": {
                                      "line": 128,
                                      "column": 17
                                    }
                                  }
                                }
                              ]
                            }
                          ],
                          "range": [
<<<<<<< HEAD
                            162,
                            4833
=======
                            165,
                            4961
>>>>>>> release_branch
                          ],
                          "loc": {
                            "start": {
                              "line": 4,
                              "column": 62
                            },
                            "end": {
                              "line": 129,
                              "column": 5
                            }
                          }
                        },
                        "generator": false,
                        "expression": false,
                        "range": [
<<<<<<< HEAD
                          151,
                          4833
=======
                          154,
                          4961
>>>>>>> release_branch
                        ],
                        "loc": {
                          "start": {
                            "line": 4,
                            "column": 51
                          },
                          "end": {
                            "line": 129,
                            "column": 5
                          }
                        }
                      }
                    ],
                    "range": [
<<<<<<< HEAD
                      104,
                      4834
=======
                      107,
                      4962
>>>>>>> release_branch
                    ],
                    "loc": {
                      "start": {
                        "line": 4,
                        "column": 4
                      },
                      "end": {
                        "line": 129,
                        "column": 6
                      }
                    },
                    "_esdocTestId": 13,
                    "_esdocTestName": "describe13"
                  },
                  "range": [
<<<<<<< HEAD
                    104,
                    4835
=======
                    107,
                    4963
>>>>>>> release_branch
                  ],
                  "loc": {
                    "start": {
                      "line": 4,
                      "column": 4
                    },
                    "end": {
                      "line": 129,
                      "column": 7
                    }
                  },
                  "leadingComments": [
                    {
                      "type": "Block",
                      "value": "* @test {InternalOpenGateAPI#bundlesBuilder()} ",
                      "range": [
<<<<<<< HEAD
                        48,
                        99
=======
                        50,
                        101
>>>>>>> release_branch
                      ],
                      "loc": {
                        "start": {
                          "line": 3,
                          "column": 4
                        },
                        "end": {
                          "line": 3,
                          "column": 55
                        }
                      }
                    }
                  ],
                  "trailingComments": [
                    {
                      "type": "Block",
<<<<<<< HEAD
                      "value": " describe('Check Deployment Element:', function() {\n\n            it('Check constructor Deployment Element', function() {\n                assert.throws(function() {\n                    ogapi.bundlesBuilder().addDeploymentElement();\n                }, \"Parameters name, version must be defined\");\n            });\n\n            it('Deploy element', function() {\n                assert.doesNotThrow(function() {\n                    ogapi.bundlesBuilder().withName('bundle_testing').withVersion('V1').addDeploymentElement();\n                });\n            });\n            describe('Check Deployment Element basic elements:', function() {\n                var deploymentElement;\n                before(function() {\n                    deploymentElement = ogapi.bundlesBuilder().withName('bundle_testing').withVersion('V1').addDeploymentElement();\n                });\n\n                it('Check parameter name', function() {\n                    assert.throws(function() {\n                        deploymentElement.withName(111);\n                    }, \"Parameter name must be a string and has a maximum length of 50\");\n                });\n                it('Check parameter version', function() {\n                    assert.throws(function() {\n                        deploymentElement.withVersion(111);\n                    }, \"Parameter version must be a string and has a maximum length of 50\");\n                });\n                it('Check parameter Type', function() {\n                    assert.throws(function() {\n                        deploymentElement.withType(111);\n                    }, \"Parameter type must be typeof string\");\n                });\n                it('Check parameter Type', function() {\n                    assert.throws(function() {\n                        deploymentElement.withType(\"Type\");\n                    }, 'Parameter type is not allowed. Parameter value <\\'\"Type\"\\'>, type allowed <\\'[\"SOFTWARE\",\"FIRMWARE\",\"CONFIGURATION\",\"PARAMETERS\"]\\'>');\n                });\n                it('Check parameter Path', function() {\n                    assert.throws(function() {\n                        deploymentElement.withPath(111);\n                    }, \"Parameter path must be a string\");\n                });\n                it('Check parameter Order', function() {\n                    assert.doesNotThrow(function() {\n                        deploymentElement.withOrder(111);\n                    });\n                });\n                it('Check parameter Operation', function() {\n                    assert.throws(function() {\n                        deploymentElement.withOperation(111);\n                    }, \"Parameter operation must be typeof string\");\n                });\n                it('Check parameter Operation', function() {\n                    assert.throws(function() {\n                        deploymentElement.withOperation(\"OPERATION\");\n                    }, 'Parameter operation is not allowed. Parameter value <\\'\"OPERATION\"\\'>, operation allowed <\\'[\"INSTALL\",\"UNINSTALL\",\"UPGRADE\"]\\'>');\n                });\n                it('Check parameter Option', function() {\n                    assert.throws(function() {\n                        deploymentElement.withOption(111);\n                    }, \"Parameter option must be typeof string\");\n                });\n                it('Check parameter Option', function() {\n                    assert.throws(function() {\n                        deploymentElement.withOption(\"option\");\n                    }, 'Parameter option is not allowed. Parameter value <\\'\"option\"\\'>, option allowed <\\'[\"MANDATORY\",\"OPTIONAL\"]\\'>');\n                });\n                it('Check parameter Validator is an Array', function() {\n                    assert.throws(function() {\n                        deploymentElement.withValidators(\"\");\n                    }, 'Parameter validators must be typeof Array');\n                });\n                it('Check parameter Validator have at least one element', function() {\n                    assert.doesNotThrow(function() {\n                        deploymentElement.withValidators([]);\n                    });\n                });\n\n                it('Check parameter type in validator is a string', function() {\n                    var validators = [{\n                        type: 1,\n                        value: \"\",\n                        mode: \"\"\n                    }];\n\n                    assert.throws(function() {\n                        deploymentElement.withValidators(validators);\n                    }, 'Parameter type must be typeof string');\n                });\n                it('Check parameter type in validator have a correct value', function() {\n\n                    var validators = [{\n                        type: \"SHA-1\"\n                    }];\n\n                    assert.doesNotThrow(function() {\n                        deploymentElement.withValidators(validators);\n                    });\n                });\n                it('Check parameter type in validator is typeof string', function() {\n\n                    var validators = [{\n                        type: \"SHA-1\",\n                        value: 1\n                    }];\n\n                    assert.throws(function() {\n                        deploymentElement.withValidators(validators);\n                    }, 'Parameter value must be a string');\n                });\n                it('Check parameter mode in validator is typeof string', function() {\n\n                    var validators = [{\n                        type: \"SHA-1\",\n                        value: \"\",\n                        mode: 1\n                    }];\n\n                    assert.throws(function() {\n                        deploymentElement.withValidators(validators);\n                    }, 'Parameter mode must be a string');\n                });\n\n                it('Check parameter mode in validator is typeof string', function() {\n\n                    var validators = [{\n                        type: \"SHA-1\",\n                        value: \"\",\n                        mode: \"\"\n                    }, {\n                        type: \"MD5\",\n                        value: \"\",\n                        mode: 1\n                    }];\n\n                    assert.throws(function() {\n                        deploymentElement.withValidators(validators);\n                    }, 'Parameter mode must be a string');\n                });\n\n                it('Check parameter DownloadUrl', function() {\n                    assert.throws(function() {\n                        deploymentElement.withDownloadUrl(111);\n                    }, \"Parameter downloadUrl must be a string\");\n                });\n                it('Check parameter FileName', function() {\n                    assert.throws(function() {\n                        deploymentElement.withFileName(111);\n                    }, \"Parameter fileName must be a string\");\n                });\n            });\n            describe('Check DeploymentElement basic elements:', function() {\n                var deploymentElement;\n                before(function() {\n                    bundle = ogapi.bundlesBuilder();\n                    bundle.withName('bundle_testing_2').withVersion('V1').withWorkgroup('baseWorkGroup').withHardware(\"OWA21\");\n                    try {\n                        bundle.delete();\n                    } catch (error) {\n\n                    };\n                    bundle.create();\n                    deploymentElement = bundle.addDeploymentElement();\n                });\n\n                it('Define a deployment element', function() {\n                    assert.throws(function() {\n                        deploymentElement.withName(1);\n                    }, \"Parameter name must be a string\");\n                });\n                it('Create a deployment element', function() {\n                    assert.throws(function() {\n                        deploymentElement.withVersion(\"bundles-file-example\").create();\n                    }, \"Method not allowed - You must define the basic element [name, version, type, path, order and operation]\");\n                });\n                it('Check urls:', function() {\n                    assert.strictEqual(deploymentElement._url, 'provision/bundles/bundle_testing_2/versions/V1/deploymentElements');\n                });\n\n                it('Create a deployment element', function() {\n                    var file = new Blob([\"bundle ejemplo\"], {\n                        type: 'text/plain'\n                    });\n                    assert.doesNotThrow(function() {\n                        deploymentElement.withName(\"file_1\").withVersion(\"1\").withType(\"SOFTWARE\")\n                            .withPath(\"/\").withOrder(\"1\").withOperation(\"INSTALL\").withDownloadUrl(\"/\")\n                            .withValidators([{ \"type\": \"SHA-1\", \"value\": \"123\" }]).withOption(\"OPTIONAL\").create(file);\n                    });\n                    bundle.activate();\n\n                });\n            });\n\n        });\n\n\n    });",
                      "range": [
                        4841,
                        13873
=======
                      "value": " describe('Check Deployment Element:', function() {\r\n\r\n            it('Check constructor Deployment Element', function() {\r\n                assert.throws(function() {\r\n                    ogapi.bundlesBuilder().addDeploymentElement();\r\n                }, \"Parameters name, version must be defined\");\r\n            });\r\n\r\n            it('Deploy element', function() {\r\n                assert.doesNotThrow(function() {\r\n                    ogapi.bundlesBuilder().withName('bundle_testing').withVersion('V1').addDeploymentElement();\r\n                });\r\n            });\r\n            describe('Check Deployment Element basic elements:', function() {\r\n                var deploymentElement;\r\n                before(function() {\r\n                    deploymentElement = ogapi.bundlesBuilder().withName('bundle_testing').withVersion('V1').addDeploymentElement();\r\n                });\r\n\r\n                it('Check parameter name', function() {\r\n                    assert.throws(function() {\r\n                        deploymentElement.withName(111);\r\n                    }, \"Parameter name must be a string and has a maximum length of 50\");\r\n                });\r\n                it('Check parameter version', function() {\r\n                    assert.throws(function() {\r\n                        deploymentElement.withVersion(111);\r\n                    }, \"Parameter version must be a string and has a maximum length of 50\");\r\n                });\r\n                it('Check parameter Type', function() {\r\n                    assert.throws(function() {\r\n                        deploymentElement.withType(111);\r\n                    }, \"Parameter type must be typeof string\");\r\n                });\r\n                it('Check parameter Type', function() {\r\n                    assert.throws(function() {\r\n                        deploymentElement.withType(\"Type\");\r\n                    }, 'Parameter type is not allowed. Parameter value <\\'\"Type\"\\'>, type allowed <\\'[\"SOFTWARE\",\"FIRMWARE\",\"CONFIGURATION\",\"PARAMETERS\"]\\'>');\r\n                });\r\n                it('Check parameter Path', function() {\r\n                    assert.throws(function() {\r\n                        deploymentElement.withPath(111);\r\n                    }, \"Parameter path must be a string\");\r\n                });\r\n                it('Check parameter Order', function() {\r\n                    assert.doesNotThrow(function() {\r\n                        deploymentElement.withOrder(111);\r\n                    });\r\n                });\r\n                it('Check parameter Operation', function() {\r\n                    assert.throws(function() {\r\n                        deploymentElement.withOperation(111);\r\n                    }, \"Parameter operation must be typeof string\");\r\n                });\r\n                it('Check parameter Operation', function() {\r\n                    assert.throws(function() {\r\n                        deploymentElement.withOperation(\"OPERATION\");\r\n                    }, 'Parameter operation is not allowed. Parameter value <\\'\"OPERATION\"\\'>, operation allowed <\\'[\"INSTALL\",\"UNINSTALL\",\"UPGRADE\"]\\'>');\r\n                });\r\n                it('Check parameter Option', function() {\r\n                    assert.throws(function() {\r\n                        deploymentElement.withOption(111);\r\n                    }, \"Parameter option must be typeof string\");\r\n                });\r\n                it('Check parameter Option', function() {\r\n                    assert.throws(function() {\r\n                        deploymentElement.withOption(\"option\");\r\n                    }, 'Parameter option is not allowed. Parameter value <\\'\"option\"\\'>, option allowed <\\'[\"MANDATORY\",\"OPTIONAL\"]\\'>');\r\n                });\r\n                it('Check parameter Validator is an Array', function() {\r\n                    assert.throws(function() {\r\n                        deploymentElement.withValidators(\"\");\r\n                    }, 'Parameter validators must be typeof Array');\r\n                });\r\n                it('Check parameter Validator have at least one element', function() {\r\n                    assert.doesNotThrow(function() {\r\n                        deploymentElement.withValidators([]);\r\n                    });\r\n                });\r\n\r\n                it('Check parameter type in validator is a string', function() {\r\n                    var validators = [{\r\n                        type: 1,\r\n                        value: \"\",\r\n                        mode: \"\"\r\n                    }];\r\n\r\n                    assert.throws(function() {\r\n                        deploymentElement.withValidators(validators);\r\n                    }, 'Parameter type must be typeof string');\r\n                });\r\n                it('Check parameter type in validator have a correct value', function() {\r\n\r\n                    var validators = [{\r\n                        type: \"SHA-1\"\r\n                    }];\r\n\r\n                    assert.doesNotThrow(function() {\r\n                        deploymentElement.withValidators(validators);\r\n                    });\r\n                });\r\n                it('Check parameter type in validator is typeof string', function() {\r\n\r\n                    var validators = [{\r\n                        type: \"SHA-1\",\r\n                        value: 1\r\n                    }];\r\n\r\n                    assert.throws(function() {\r\n                        deploymentElement.withValidators(validators);\r\n                    }, 'Parameter value must be a string');\r\n                });\r\n                it('Check parameter mode in validator is typeof string', function() {\r\n\r\n                    var validators = [{\r\n                        type: \"SHA-1\",\r\n                        value: \"\",\r\n                        mode: 1\r\n                    }];\r\n\r\n                    assert.throws(function() {\r\n                        deploymentElement.withValidators(validators);\r\n                    }, 'Parameter mode must be a string');\r\n                });\r\n\r\n                it('Check parameter mode in validator is typeof string', function() {\r\n\r\n                    var validators = [{\r\n                        type: \"SHA-1\",\r\n                        value: \"\",\r\n                        mode: \"\"\r\n                    }, {\r\n                        type: \"MD5\",\r\n                        value: \"\",\r\n                        mode: 1\r\n                    }];\r\n\r\n                    assert.throws(function() {\r\n                        deploymentElement.withValidators(validators);\r\n                    }, 'Parameter mode must be a string');\r\n                });\r\n\r\n                it('Check parameter DownloadUrl', function() {\r\n                    assert.throws(function() {\r\n                        deploymentElement.withDownloadUrl(111);\r\n                    }, \"Parameter downloadUrl must be a string\");\r\n                });\r\n                it('Check parameter FileName', function() {\r\n                    assert.throws(function() {\r\n                        deploymentElement.withFileName(111);\r\n                    }, \"Parameter fileName must be a string\");\r\n                });\r\n            });\r\n            describe('Check DeploymentElement basic elements:', function() {\r\n                var deploymentElement;\r\n                before(function() {\r\n                    bundle = ogapi.bundlesBuilder();\r\n                    bundle.withName('bundle_testing_2').withVersion('V1').withWorkgroup('baseWorkGroup').withHardware(\"OWA21\");\r\n                    try {\r\n                        bundle.delete();\r\n                    } catch (error) {\r\n\r\n                    };\r\n                    bundle.create();\r\n                    deploymentElement = bundle.addDeploymentElement();\r\n                });\r\n\r\n                it('Define a deployment element', function() {\r\n                    assert.throws(function() {\r\n                        deploymentElement.withName(1);\r\n                    }, \"Parameter name must be a string\");\r\n                });\r\n                it('Create a deployment element', function() {\r\n                    assert.throws(function() {\r\n                        deploymentElement.withVersion(\"bundles-file-example\").create();\r\n                    }, \"Method not allowed - You must define the basic element [name, version, type, path, order and operation]\");\r\n                });\r\n                it('Check urls:', function() {\r\n                    assert.strictEqual(deploymentElement._url, 'provision/bundles/bundle_testing_2/versions/V1/deploymentElements');\r\n                });\r\n\r\n                it('Create a deployment element', function() {\r\n                    var file = new Blob([\"bundle ejemplo\"], {\r\n                        type: 'text/plain'\r\n                    });\r\n                    assert.doesNotThrow(function() {\r\n                        deploymentElement.withName(\"file_1\").withVersion(\"1\").withType(\"SOFTWARE\")\r\n                            .withPath(\"/\").withOrder(\"1\").withOperation(\"INSTALL\").withDownloadUrl(\"/\")\r\n                            .withValidators([{ \"type\": \"SHA-1\", \"value\": \"123\" }]).withOption(\"OPTIONAL\").create(file);\r\n                    });\r\n                    bundle.activate();\r\n\r\n                });\r\n            });\r\n\r\n        });\r\n\r\n\r\n    });",
                      "range": [
                        4971,
                        14201
>>>>>>> release_branch
                      ],
                      "loc": {
                        "start": {
                          "line": 131,
                          "column": 4
                        },
                        "end": {
                          "line": 329,
                          "column": 9
                        }
                      }
                    }
                  ]
                }
              ],
              "range": [
                18,
<<<<<<< HEAD
                13875
=======
                14204
>>>>>>> release_branch
              ],
              "loc": {
                "start": {
                  "line": 1,
                  "column": 18
                },
                "end": {
                  "line": 330,
                  "column": 1
                }
              }
            },
            "generator": false,
            "expression": false,
            "range": [
              7,
<<<<<<< HEAD
              13875
=======
              14204
>>>>>>> release_branch
            ],
            "loc": {
              "start": {
                "line": 1,
                "column": 7
              },
              "end": {
                "line": 330,
                "column": 1
              }
            }
          }
        ],
        "range": [
          0,
<<<<<<< HEAD
          13876
=======
          14205
>>>>>>> release_branch
        ],
        "loc": {
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 330,
            "column": 2
          }
        }
      },
      "range": [
        0,
<<<<<<< HEAD
        13877
=======
        14206
>>>>>>> release_branch
      ],
      "loc": {
        "start": {
          "line": 1,
          "column": 0
        },
        "end": {
          "line": 330,
          "column": 3
        }
      }
    }
  ],
  "sourceType": "module",
  "range": [
    0,
<<<<<<< HEAD
    13877
=======
    14206
>>>>>>> release_branch
  ],
  "loc": {
    "start": {
      "line": 1,
      "column": 0
    },
    "end": {
      "line": 330,
      "column": 3
    }
  },
  "comments": [
    {
      "type": "Block",
      "value": "* @test {InternalOpenGateAPI#bundlesBuilder()} ",
      "range": [
<<<<<<< HEAD
        48,
        99
=======
        50,
        101
>>>>>>> release_branch
      ],
      "loc": {
        "start": {
          "line": 3,
          "column": 4
        },
        "end": {
          "line": 3,
          "column": 55
        }
      }
    },
    {
      "type": "Block",
      "value": "* @test {InternalOpenGateAPI#bundlesBuilder} ",
      "range": [
<<<<<<< HEAD
        277,
        326
=======
        285,
        334
>>>>>>> release_branch
      ],
      "loc": {
        "start": {
          "line": 9,
          "column": 8
        },
        "end": {
          "line": 9,
          "column": 57
        }
      }
    },
    {
      "type": "Block",
<<<<<<< HEAD
      "value": "describe('Check basic parameters:', function() {\n\n            it('Name is not a String', function() {\n                assert.throws(function() {\n                    ogapi.bundlesBuilder().withName(11);\n                }, \"Parameter name must be a string and has a maximum length of 255\");\n\n            });\n\n            it('version is not a String', function() {\n                assert.throws(function() {\n                    ogapi.bundlesBuilder().withVersion(1);\n                }, \"Parameter version must be a string and has a maximum length of 50\");\n\n            });\n\n            it('Hardware is not a String', function() {\n                assert.throws(function() {\n                    ogapi.bundlesBuilder().withHardware(1);\n                }, \"Parameter hardware must be a string\");\n\n            });\n\n            it('workgroup is not a String', function() {\n                assert.throws(function() {\n                    ogapi.bundlesBuilder().withWorkgroup(1);\n                }, \"Parameter workgroup must be a string\");\n\n            });\n\n            it('description is not a String', function() {\n                assert.throws(function() {\n                    ogapi.bundlesBuilder().withDescription(1);\n                }, \"Parameter description must be a string and has a maximum length of 250\");\n\n            });\n\n            it('UserNotes is not a String', function() {\n                assert.throws(function() {\n                    ogapi.bundlesBuilder().withUserNotes(1);\n                }, \"Parameter notes must be a string and has a maximum length of 250\");\n\n            });\n\n            it('POSTACTION is not an Array', function() {\n                assert.throws(function() {\n                    ogapi.bundlesBuilder().withPreaction(\"\");\n                }, \"Parameter preaction must be typeof Array\");\n\n            });\n\n            it('POSTACTION does not have at least one element', function() {\n                assert.doesNotThrow(function() {\n                    ogapi.bundlesBuilder().withPreaction([]);\n                });\n\n            });\n\n            it('POSTACTION does not have correct Elements', function() {\n                assert.throws(function() {\n                    ogapi.bundlesBuilder().withPreaction([\"dd\"]);\n                }, 'Any action into parameter preaction is not allowed. Parameter value <\\'[\"dd\"]\\'>, preaction allowed <\\'[\"HARDWARE_RESET\",\"SOFTWARE_RESET\",\"COMMS_DOWN\",\"COMMS_UP\",\"COMMS_RESET\"]\\'>');\n\n            });\n\n            it('POSTACTION have correct Elements', function() {\n                assert.doesNotThrow(function() {\n                    ogapi.bundlesBuilder().withPreaction([\"HARDWARE_RESET\", \"SOFTWARE_RESET\", \"COMMS_DOWN\", \"COMMS_UP\", \"COMMS_RESET\"]);\n                });\n            });\n\n\n            it('Required parameters', function() {\n                assert.throws(function() {\n                    ogapi.bundlesBuilder().create();\n                }, \"Parameters name, version, hardware, workgroup  must be defined\");\n            });\n\n            it('Check parameters type', function() {\n                assert.throws(function() {\n                    ogapi.bundlesBuilder().withName(222);\n                }, \"Parameter name must be a string\");\n            });\n        });\n        describe('Create a Bundle:', function() {\n\n            before(function() {\n                bundle.withName('bundle_testing').withVersion('V1').withWorkgroup('baseWorkGroup');\n            });\n\n            it('Check basic parameters', function() {\n                assert.throws(function() {\n                    bundle.create();\n                }, \"Parameters name, version, hardware, workgroup  must be defined\");\n            });\n\n            it('Create a bundle without Hardware', function() {\n                assert.throws(function() {\n                    bundle.create();\n                }, \"Parameters name, version, hardware, workgroup  must be defined\");\n            });\n\n            it('Create a bundle', function() {\n                assert.doesNotThrow(function() {\n                    bundle.withHardware(\"OWA21\").create();\n                });\n            });\n            it('Activate a bundle', function() {\n                assert.doesNotThrow(function() {\n                    bundle.activate();\n                });\n            });\n            /*\n             it('Delete a bundle', function() {\n                assert.doesNotThrow(function() {\n                    bundle.delete();\n                });\n                \n            });",
      "range": [
        335,
        4827
=======
      "value": "describe('Check basic parameters:', function() {\r\n\r\n            it('Name is not a String', function() {\r\n                assert.throws(function() {\r\n                    ogapi.bundlesBuilder().withName(11);\r\n                }, \"Parameter name must be a string and has a maximum length of 255\");\r\n\r\n            });\r\n\r\n            it('version is not a String', function() {\r\n                assert.throws(function() {\r\n                    ogapi.bundlesBuilder().withVersion(1);\r\n                }, \"Parameter version must be a string and has a maximum length of 50\");\r\n\r\n            });\r\n\r\n            it('Hardware is not a String', function() {\r\n                assert.throws(function() {\r\n                    ogapi.bundlesBuilder().withHardware(1);\r\n                }, \"Parameter hardware must be a string\");\r\n\r\n            });\r\n\r\n            it('workgroup is not a String', function() {\r\n                assert.throws(function() {\r\n                    ogapi.bundlesBuilder().withWorkgroup(1);\r\n                }, \"Parameter workgroup must be a string\");\r\n\r\n            });\r\n\r\n            it('description is not a String', function() {\r\n                assert.throws(function() {\r\n                    ogapi.bundlesBuilder().withDescription(1);\r\n                }, \"Parameter description must be a string and has a maximum length of 250\");\r\n\r\n            });\r\n\r\n            it('UserNotes is not a String', function() {\r\n                assert.throws(function() {\r\n                    ogapi.bundlesBuilder().withUserNotes(1);\r\n                }, \"Parameter notes must be a string and has a maximum length of 250\");\r\n\r\n            });\r\n\r\n            it('POSTACTION is not an Array', function() {\r\n                assert.throws(function() {\r\n                    ogapi.bundlesBuilder().withPreaction(\"\");\r\n                }, \"Parameter preaction must be typeof Array\");\r\n\r\n            });\r\n\r\n            it('POSTACTION does not have at least one element', function() {\r\n                assert.doesNotThrow(function() {\r\n                    ogapi.bundlesBuilder().withPreaction([]);\r\n                });\r\n\r\n            });\r\n\r\n            it('POSTACTION does not have correct Elements', function() {\r\n                assert.throws(function() {\r\n                    ogapi.bundlesBuilder().withPreaction([\"dd\"]);\r\n                }, 'Any action into parameter preaction is not allowed. Parameter value <\\'[\"dd\"]\\'>, preaction allowed <\\'[\"HARDWARE_RESET\",\"SOFTWARE_RESET\",\"COMMS_DOWN\",\"COMMS_UP\",\"COMMS_RESET\"]\\'>');\r\n\r\n            });\r\n\r\n            it('POSTACTION have correct Elements', function() {\r\n                assert.doesNotThrow(function() {\r\n                    ogapi.bundlesBuilder().withPreaction([\"HARDWARE_RESET\", \"SOFTWARE_RESET\", \"COMMS_DOWN\", \"COMMS_UP\", \"COMMS_RESET\"]);\r\n                });\r\n            });\r\n\r\n\r\n            it('Required parameters', function() {\r\n                assert.throws(function() {\r\n                    ogapi.bundlesBuilder().create();\r\n                }, \"Parameters name, version, hardware, workgroup  must be defined\");\r\n            });\r\n\r\n            it('Check parameters type', function() {\r\n                assert.throws(function() {\r\n                    ogapi.bundlesBuilder().withName(222);\r\n                }, \"Parameter name must be a string\");\r\n            });\r\n        });\r\n        describe('Create a Bundle:', function() {\r\n\r\n            before(function() {\r\n                bundle.withName('bundle_testing').withVersion('V1').withWorkgroup('baseWorkGroup');\r\n            });\r\n\r\n            it('Check basic parameters', function() {\r\n                assert.throws(function() {\r\n                    bundle.create();\r\n                }, \"Parameters name, version, hardware, workgroup  must be defined\");\r\n            });\r\n\r\n            it('Create a bundle without Hardware', function() {\r\n                assert.throws(function() {\r\n                    bundle.create();\r\n                }, \"Parameters name, version, hardware, workgroup  must be defined\");\r\n            });\r\n\r\n            it('Create a bundle', function() {\r\n                assert.doesNotThrow(function() {\r\n                    bundle.withHardware(\"OWA21\").create();\r\n                });\r\n            });\r\n            it('Activate a bundle', function() {\r\n                assert.doesNotThrow(function() {\r\n                    bundle.activate();\r\n                });\r\n            });\r\n            /*\r\n             it('Delete a bundle', function() {\r\n                assert.doesNotThrow(function() {\r\n                    bundle.delete();\r\n                });\r\n                \r\n            });",
      "range": [
        344,
        4954
>>>>>>> release_branch
      ],
      "loc": {
        "start": {
          "line": 10,
          "column": 8
        },
        "end": {
          "line": 128,
          "column": 17
        }
      }
    },
    {
      "type": "Block",
<<<<<<< HEAD
      "value": " describe('Check Deployment Element:', function() {\n\n            it('Check constructor Deployment Element', function() {\n                assert.throws(function() {\n                    ogapi.bundlesBuilder().addDeploymentElement();\n                }, \"Parameters name, version must be defined\");\n            });\n\n            it('Deploy element', function() {\n                assert.doesNotThrow(function() {\n                    ogapi.bundlesBuilder().withName('bundle_testing').withVersion('V1').addDeploymentElement();\n                });\n            });\n            describe('Check Deployment Element basic elements:', function() {\n                var deploymentElement;\n                before(function() {\n                    deploymentElement = ogapi.bundlesBuilder().withName('bundle_testing').withVersion('V1').addDeploymentElement();\n                });\n\n                it('Check parameter name', function() {\n                    assert.throws(function() {\n                        deploymentElement.withName(111);\n                    }, \"Parameter name must be a string and has a maximum length of 50\");\n                });\n                it('Check parameter version', function() {\n                    assert.throws(function() {\n                        deploymentElement.withVersion(111);\n                    }, \"Parameter version must be a string and has a maximum length of 50\");\n                });\n                it('Check parameter Type', function() {\n                    assert.throws(function() {\n                        deploymentElement.withType(111);\n                    }, \"Parameter type must be typeof string\");\n                });\n                it('Check parameter Type', function() {\n                    assert.throws(function() {\n                        deploymentElement.withType(\"Type\");\n                    }, 'Parameter type is not allowed. Parameter value <\\'\"Type\"\\'>, type allowed <\\'[\"SOFTWARE\",\"FIRMWARE\",\"CONFIGURATION\",\"PARAMETERS\"]\\'>');\n                });\n                it('Check parameter Path', function() {\n                    assert.throws(function() {\n                        deploymentElement.withPath(111);\n                    }, \"Parameter path must be a string\");\n                });\n                it('Check parameter Order', function() {\n                    assert.doesNotThrow(function() {\n                        deploymentElement.withOrder(111);\n                    });\n                });\n                it('Check parameter Operation', function() {\n                    assert.throws(function() {\n                        deploymentElement.withOperation(111);\n                    }, \"Parameter operation must be typeof string\");\n                });\n                it('Check parameter Operation', function() {\n                    assert.throws(function() {\n                        deploymentElement.withOperation(\"OPERATION\");\n                    }, 'Parameter operation is not allowed. Parameter value <\\'\"OPERATION\"\\'>, operation allowed <\\'[\"INSTALL\",\"UNINSTALL\",\"UPGRADE\"]\\'>');\n                });\n                it('Check parameter Option', function() {\n                    assert.throws(function() {\n                        deploymentElement.withOption(111);\n                    }, \"Parameter option must be typeof string\");\n                });\n                it('Check parameter Option', function() {\n                    assert.throws(function() {\n                        deploymentElement.withOption(\"option\");\n                    }, 'Parameter option is not allowed. Parameter value <\\'\"option\"\\'>, option allowed <\\'[\"MANDATORY\",\"OPTIONAL\"]\\'>');\n                });\n                it('Check parameter Validator is an Array', function() {\n                    assert.throws(function() {\n                        deploymentElement.withValidators(\"\");\n                    }, 'Parameter validators must be typeof Array');\n                });\n                it('Check parameter Validator have at least one element', function() {\n                    assert.doesNotThrow(function() {\n                        deploymentElement.withValidators([]);\n                    });\n                });\n\n                it('Check parameter type in validator is a string', function() {\n                    var validators = [{\n                        type: 1,\n                        value: \"\",\n                        mode: \"\"\n                    }];\n\n                    assert.throws(function() {\n                        deploymentElement.withValidators(validators);\n                    }, 'Parameter type must be typeof string');\n                });\n                it('Check parameter type in validator have a correct value', function() {\n\n                    var validators = [{\n                        type: \"SHA-1\"\n                    }];\n\n                    assert.doesNotThrow(function() {\n                        deploymentElement.withValidators(validators);\n                    });\n                });\n                it('Check parameter type in validator is typeof string', function() {\n\n                    var validators = [{\n                        type: \"SHA-1\",\n                        value: 1\n                    }];\n\n                    assert.throws(function() {\n                        deploymentElement.withValidators(validators);\n                    }, 'Parameter value must be a string');\n                });\n                it('Check parameter mode in validator is typeof string', function() {\n\n                    var validators = [{\n                        type: \"SHA-1\",\n                        value: \"\",\n                        mode: 1\n                    }];\n\n                    assert.throws(function() {\n                        deploymentElement.withValidators(validators);\n                    }, 'Parameter mode must be a string');\n                });\n\n                it('Check parameter mode in validator is typeof string', function() {\n\n                    var validators = [{\n                        type: \"SHA-1\",\n                        value: \"\",\n                        mode: \"\"\n                    }, {\n                        type: \"MD5\",\n                        value: \"\",\n                        mode: 1\n                    }];\n\n                    assert.throws(function() {\n                        deploymentElement.withValidators(validators);\n                    }, 'Parameter mode must be a string');\n                });\n\n                it('Check parameter DownloadUrl', function() {\n                    assert.throws(function() {\n                        deploymentElement.withDownloadUrl(111);\n                    }, \"Parameter downloadUrl must be a string\");\n                });\n                it('Check parameter FileName', function() {\n                    assert.throws(function() {\n                        deploymentElement.withFileName(111);\n                    }, \"Parameter fileName must be a string\");\n                });\n            });\n            describe('Check DeploymentElement basic elements:', function() {\n                var deploymentElement;\n                before(function() {\n                    bundle = ogapi.bundlesBuilder();\n                    bundle.withName('bundle_testing_2').withVersion('V1').withWorkgroup('baseWorkGroup').withHardware(\"OWA21\");\n                    try {\n                        bundle.delete();\n                    } catch (error) {\n\n                    };\n                    bundle.create();\n                    deploymentElement = bundle.addDeploymentElement();\n                });\n\n                it('Define a deployment element', function() {\n                    assert.throws(function() {\n                        deploymentElement.withName(1);\n                    }, \"Parameter name must be a string\");\n                });\n                it('Create a deployment element', function() {\n                    assert.throws(function() {\n                        deploymentElement.withVersion(\"bundles-file-example\").create();\n                    }, \"Method not allowed - You must define the basic element [name, version, type, path, order and operation]\");\n                });\n                it('Check urls:', function() {\n                    assert.strictEqual(deploymentElement._url, 'provision/bundles/bundle_testing_2/versions/V1/deploymentElements');\n                });\n\n                it('Create a deployment element', function() {\n                    var file = new Blob([\"bundle ejemplo\"], {\n                        type: 'text/plain'\n                    });\n                    assert.doesNotThrow(function() {\n                        deploymentElement.withName(\"file_1\").withVersion(\"1\").withType(\"SOFTWARE\")\n                            .withPath(\"/\").withOrder(\"1\").withOperation(\"INSTALL\").withDownloadUrl(\"/\")\n                            .withValidators([{ \"type\": \"SHA-1\", \"value\": \"123\" }]).withOption(\"OPTIONAL\").create(file);\n                    });\n                    bundle.activate();\n\n                });\n            });\n\n        });\n\n\n    });",
      "range": [
        4841,
        13873
=======
      "value": " describe('Check Deployment Element:', function() {\r\n\r\n            it('Check constructor Deployment Element', function() {\r\n                assert.throws(function() {\r\n                    ogapi.bundlesBuilder().addDeploymentElement();\r\n                }, \"Parameters name, version must be defined\");\r\n            });\r\n\r\n            it('Deploy element', function() {\r\n                assert.doesNotThrow(function() {\r\n                    ogapi.bundlesBuilder().withName('bundle_testing').withVersion('V1').addDeploymentElement();\r\n                });\r\n            });\r\n            describe('Check Deployment Element basic elements:', function() {\r\n                var deploymentElement;\r\n                before(function() {\r\n                    deploymentElement = ogapi.bundlesBuilder().withName('bundle_testing').withVersion('V1').addDeploymentElement();\r\n                });\r\n\r\n                it('Check parameter name', function() {\r\n                    assert.throws(function() {\r\n                        deploymentElement.withName(111);\r\n                    }, \"Parameter name must be a string and has a maximum length of 50\");\r\n                });\r\n                it('Check parameter version', function() {\r\n                    assert.throws(function() {\r\n                        deploymentElement.withVersion(111);\r\n                    }, \"Parameter version must be a string and has a maximum length of 50\");\r\n                });\r\n                it('Check parameter Type', function() {\r\n                    assert.throws(function() {\r\n                        deploymentElement.withType(111);\r\n                    }, \"Parameter type must be typeof string\");\r\n                });\r\n                it('Check parameter Type', function() {\r\n                    assert.throws(function() {\r\n                        deploymentElement.withType(\"Type\");\r\n                    }, 'Parameter type is not allowed. Parameter value <\\'\"Type\"\\'>, type allowed <\\'[\"SOFTWARE\",\"FIRMWARE\",\"CONFIGURATION\",\"PARAMETERS\"]\\'>');\r\n                });\r\n                it('Check parameter Path', function() {\r\n                    assert.throws(function() {\r\n                        deploymentElement.withPath(111);\r\n                    }, \"Parameter path must be a string\");\r\n                });\r\n                it('Check parameter Order', function() {\r\n                    assert.doesNotThrow(function() {\r\n                        deploymentElement.withOrder(111);\r\n                    });\r\n                });\r\n                it('Check parameter Operation', function() {\r\n                    assert.throws(function() {\r\n                        deploymentElement.withOperation(111);\r\n                    }, \"Parameter operation must be typeof string\");\r\n                });\r\n                it('Check parameter Operation', function() {\r\n                    assert.throws(function() {\r\n                        deploymentElement.withOperation(\"OPERATION\");\r\n                    }, 'Parameter operation is not allowed. Parameter value <\\'\"OPERATION\"\\'>, operation allowed <\\'[\"INSTALL\",\"UNINSTALL\",\"UPGRADE\"]\\'>');\r\n                });\r\n                it('Check parameter Option', function() {\r\n                    assert.throws(function() {\r\n                        deploymentElement.withOption(111);\r\n                    }, \"Parameter option must be typeof string\");\r\n                });\r\n                it('Check parameter Option', function() {\r\n                    assert.throws(function() {\r\n                        deploymentElement.withOption(\"option\");\r\n                    }, 'Parameter option is not allowed. Parameter value <\\'\"option\"\\'>, option allowed <\\'[\"MANDATORY\",\"OPTIONAL\"]\\'>');\r\n                });\r\n                it('Check parameter Validator is an Array', function() {\r\n                    assert.throws(function() {\r\n                        deploymentElement.withValidators(\"\");\r\n                    }, 'Parameter validators must be typeof Array');\r\n                });\r\n                it('Check parameter Validator have at least one element', function() {\r\n                    assert.doesNotThrow(function() {\r\n                        deploymentElement.withValidators([]);\r\n                    });\r\n                });\r\n\r\n                it('Check parameter type in validator is a string', function() {\r\n                    var validators = [{\r\n                        type: 1,\r\n                        value: \"\",\r\n                        mode: \"\"\r\n                    }];\r\n\r\n                    assert.throws(function() {\r\n                        deploymentElement.withValidators(validators);\r\n                    }, 'Parameter type must be typeof string');\r\n                });\r\n                it('Check parameter type in validator have a correct value', function() {\r\n\r\n                    var validators = [{\r\n                        type: \"SHA-1\"\r\n                    }];\r\n\r\n                    assert.doesNotThrow(function() {\r\n                        deploymentElement.withValidators(validators);\r\n                    });\r\n                });\r\n                it('Check parameter type in validator is typeof string', function() {\r\n\r\n                    var validators = [{\r\n                        type: \"SHA-1\",\r\n                        value: 1\r\n                    }];\r\n\r\n                    assert.throws(function() {\r\n                        deploymentElement.withValidators(validators);\r\n                    }, 'Parameter value must be a string');\r\n                });\r\n                it('Check parameter mode in validator is typeof string', function() {\r\n\r\n                    var validators = [{\r\n                        type: \"SHA-1\",\r\n                        value: \"\",\r\n                        mode: 1\r\n                    }];\r\n\r\n                    assert.throws(function() {\r\n                        deploymentElement.withValidators(validators);\r\n                    }, 'Parameter mode must be a string');\r\n                });\r\n\r\n                it('Check parameter mode in validator is typeof string', function() {\r\n\r\n                    var validators = [{\r\n                        type: \"SHA-1\",\r\n                        value: \"\",\r\n                        mode: \"\"\r\n                    }, {\r\n                        type: \"MD5\",\r\n                        value: \"\",\r\n                        mode: 1\r\n                    }];\r\n\r\n                    assert.throws(function() {\r\n                        deploymentElement.withValidators(validators);\r\n                    }, 'Parameter mode must be a string');\r\n                });\r\n\r\n                it('Check parameter DownloadUrl', function() {\r\n                    assert.throws(function() {\r\n                        deploymentElement.withDownloadUrl(111);\r\n                    }, \"Parameter downloadUrl must be a string\");\r\n                });\r\n                it('Check parameter FileName', function() {\r\n                    assert.throws(function() {\r\n                        deploymentElement.withFileName(111);\r\n                    }, \"Parameter fileName must be a string\");\r\n                });\r\n            });\r\n            describe('Check DeploymentElement basic elements:', function() {\r\n                var deploymentElement;\r\n                before(function() {\r\n                    bundle = ogapi.bundlesBuilder();\r\n                    bundle.withName('bundle_testing_2').withVersion('V1').withWorkgroup('baseWorkGroup').withHardware(\"OWA21\");\r\n                    try {\r\n                        bundle.delete();\r\n                    } catch (error) {\r\n\r\n                    };\r\n                    bundle.create();\r\n                    deploymentElement = bundle.addDeploymentElement();\r\n                });\r\n\r\n                it('Define a deployment element', function() {\r\n                    assert.throws(function() {\r\n                        deploymentElement.withName(1);\r\n                    }, \"Parameter name must be a string\");\r\n                });\r\n                it('Create a deployment element', function() {\r\n                    assert.throws(function() {\r\n                        deploymentElement.withVersion(\"bundles-file-example\").create();\r\n                    }, \"Method not allowed - You must define the basic element [name, version, type, path, order and operation]\");\r\n                });\r\n                it('Check urls:', function() {\r\n                    assert.strictEqual(deploymentElement._url, 'provision/bundles/bundle_testing_2/versions/V1/deploymentElements');\r\n                });\r\n\r\n                it('Create a deployment element', function() {\r\n                    var file = new Blob([\"bundle ejemplo\"], {\r\n                        type: 'text/plain'\r\n                    });\r\n                    assert.doesNotThrow(function() {\r\n                        deploymentElement.withName(\"file_1\").withVersion(\"1\").withType(\"SOFTWARE\")\r\n                            .withPath(\"/\").withOrder(\"1\").withOperation(\"INSTALL\").withDownloadUrl(\"/\")\r\n                            .withValidators([{ \"type\": \"SHA-1\", \"value\": \"123\" }]).withOption(\"OPTIONAL\").create(file);\r\n                    });\r\n                    bundle.activate();\r\n\r\n                });\r\n            });\r\n\r\n        });\r\n\r\n\r\n    });",
      "range": [
        4971,
        14201
>>>>>>> release_branch
      ],
      "loc": {
        "start": {
          "line": 131,
          "column": 4
        },
        "end": {
          "line": 329,
          "column": 9
        }
      }
    }
  ]
}
{
  "type": "File",
  "start": 0,
  "end": 14206,
  "loc": {
    "start": {
      "line": 1,
      "column": 0
    },
    "end": {
      "line": 330,
      "column": 3
    }
  },
  "program": {
    "type": "Program",
    "start": 0,
    "end": 14206,
    "loc": {
      "start": {
        "line": 1,
        "column": 0
      },
      "end": {
        "line": 330,
        "column": 3
      }
    },
    "sourceType": "module",
    "body": [
      {
        "type": "ExpressionStatement",
        "start": 0,
        "end": 14206,
        "loc": {
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 330,
            "column": 3
          }
        },
        "expression": {
          "type": "CallExpression",
          "start": 0,
          "end": 14205,
          "loc": {
            "start": {
              "line": 1,
              "column": 0
            },
            "end": {
              "line": 330,
              "column": 2
            }
          },
          "callee": {
            "type": "Identifier",
            "start": 0,
            "end": 6,
            "loc": {
              "start": {
                "line": 1,
                "column": 0
              },
              "end": {
                "line": 1,
                "column": 6
              },
              "identifierName": "define"
            },
            "name": "define"
          },
          "arguments": [
            {
              "type": "FunctionExpression",
              "start": 7,
              "end": 14204,
              "loc": {
                "start": {
                  "line": 1,
                  "column": 7
                },
                "end": {
                  "line": 330,
                  "column": 1
                }
              },
              "id": null,
              "generator": false,
              "expression": false,
              "async": false,
              "params": [],
              "body": {
                "type": "BlockStatement",
                "start": 18,
                "end": 14204,
                "loc": {
                  "start": {
                    "line": 1,
                    "column": 18
                  },
                  "end": {
                    "line": 330,
                    "column": 1
                  }
                },
                "body": [
                  {
                    "type": "ExpressionStatement",
                    "start": 25,
                    "end": 44,
                    "loc": {
                      "start": {
                        "line": 2,
                        "column": 4
                      },
                      "end": {
                        "line": 2,
                        "column": 23
                      }
                    },
                    "expression": {
                      "type": "CallExpression",
                      "start": 25,
                      "end": 43,
                      "loc": {
                        "start": {
                          "line": 2,
                          "column": 4
                        },
                        "end": {
                          "line": 2,
                          "column": 22
                        }
                      },
                      "callee": {
                        "type": "MemberExpression",
                        "start": 25,
                        "end": 36,
                        "loc": {
                          "start": {
                            "line": 2,
                            "column": 4
                          },
                          "end": {
                            "line": 2,
                            "column": 15
                          }
                        },
                        "object": {
                          "type": "Identifier",
                          "start": 25,
                          "end": 30,
                          "loc": {
                            "start": {
                              "line": 2,
                              "column": 4
                            },
                            "end": {
                              "line": 2,
                              "column": 9
                            },
                            "identifierName": "mocha"
                          },
                          "name": "mocha"
                        },
                        "property": {
                          "type": "Identifier",
                          "start": 31,
                          "end": 36,
                          "loc": {
                            "start": {
                              "line": 2,
                              "column": 10
                            },
                            "end": {
                              "line": 2,
                              "column": 15
                            },
                            "identifierName": "setup"
                          },
                          "name": "setup"
                        },
                        "computed": false
                      },
                      "arguments": [
                        {
                          "type": "StringLiteral",
                          "start": 37,
                          "end": 42,
                          "loc": {
                            "start": {
                              "line": 2,
                              "column": 16
                            },
                            "end": {
                              "line": 2,
                              "column": 21
                            }
                          },
                          "extra": {
                            "rawValue": "bdd",
                            "raw": "'bdd'"
                          },
                          "value": "bdd"
                        }
                      ]
                    },
                    "trailingComments": [
                      {
                        "type": "CommentBlock",
                        "value": "* @test {InternalOpenGateAPI#bundlesBuilder()} ",
                        "start": 50,
                        "end": 101,
                        "loc": {
                          "start": {
                            "line": 3,
                            "column": 4
                          },
                          "end": {
                            "line": 3,
                            "column": 55
                          }
                        }
                      }
                    ]
                  },
                  {
                    "type": "ExpressionStatement",
                    "start": 107,
                    "end": 4963,
                    "loc": {
                      "start": {
                        "line": 4,
                        "column": 4
                      },
                      "end": {
                        "line": 129,
                        "column": 7
                      }
                    },
                    "expression": {
                      "type": "CallExpression",
                      "start": 107,
                      "end": 4962,
                      "loc": {
                        "start": {
                          "line": 4,
                          "column": 4
                        },
                        "end": {
                          "line": 129,
                          "column": 6
                        }
                      },
                      "callee": {
                        "type": "Identifier",
                        "start": 107,
                        "end": 115,
                        "loc": {
                          "start": {
                            "line": 4,
                            "column": 4
                          },
                          "end": {
                            "line": 4,
                            "column": 12
                          },
                          "identifierName": "describe"
                        },
                        "name": "describe",
                        "leadingComments": null
                      },
                      "arguments": [
                        {
                          "type": "StringLiteral",
                          "start": 116,
                          "end": 152,
                          "loc": {
                            "start": {
                              "line": 4,
                              "column": 13
                            },
                            "end": {
                              "line": 4,
                              "column": 49
                            }
                          },
                          "extra": {
                            "rawValue": "Check funcionality bundles module:",
                            "raw": "'Check funcionality bundles module:'"
                          },
                          "value": "Check funcionality bundles module:"
                        },
                        {
                          "type": "FunctionExpression",
                          "start": 154,
                          "end": 4961,
                          "loc": {
                            "start": {
                              "line": 4,
                              "column": 51
                            },
                            "end": {
                              "line": 129,
                              "column": 5
                            }
                          },
                          "id": null,
                          "generator": false,
                          "expression": false,
                          "async": false,
                          "params": [],
                          "body": {
                            "type": "BlockStatement",
                            "start": 165,
                            "end": 4961,
                            "loc": {
                              "start": {
                                "line": 4,
                                "column": 62
                              },
                              "end": {
                                "line": 129,
                                "column": 5
                              }
                            },
                            "body": [
                              {
                                "type": "VariableDeclaration",
                                "start": 176,
                                "end": 187,
                                "loc": {
                                  "start": {
                                    "line": 5,
                                    "column": 8
                                  },
                                  "end": {
                                    "line": 5,
                                    "column": 19
                                  }
                                },
                                "declarations": [
                                  {
                                    "type": "VariableDeclarator",
                                    "start": 180,
                                    "end": 186,
                                    "loc": {
                                      "start": {
                                        "line": 5,
                                        "column": 12
                                      },
                                      "end": {
                                        "line": 5,
                                        "column": 18
                                      }
                                    },
                                    "id": {
                                      "type": "Identifier",
                                      "start": 180,
                                      "end": 186,
                                      "loc": {
                                        "start": {
                                          "line": 5,
                                          "column": 12
                                        },
                                        "end": {
                                          "line": 5,
                                          "column": 18
                                        },
                                        "identifierName": "bundle"
                                      },
                                      "name": "bundle"
                                    },
                                    "init": null
                                  }
                                ],
                                "kind": "var"
                              },
                              {
                                "type": "ExpressionStatement",
                                "start": 197,
                                "end": 275,
                                "loc": {
                                  "start": {
                                    "line": 6,
                                    "column": 8
                                  },
                                  "end": {
                                    "line": 8,
                                    "column": 11
                                  }
                                },
                                "expression": {
                                  "type": "CallExpression",
                                  "start": 197,
                                  "end": 274,
                                  "loc": {
                                    "start": {
                                      "line": 6,
                                      "column": 8
                                    },
                                    "end": {
                                      "line": 8,
                                      "column": 10
                                    }
                                  },
                                  "callee": {
                                    "type": "Identifier",
                                    "start": 197,
                                    "end": 203,
                                    "loc": {
                                      "start": {
                                        "line": 6,
                                        "column": 8
                                      },
                                      "end": {
                                        "line": 6,
                                        "column": 14
                                      },
                                      "identifierName": "before"
                                    },
                                    "name": "before"
                                  },
                                  "arguments": [
                                    {
                                      "type": "FunctionExpression",
                                      "start": 204,
                                      "end": 273,
                                      "loc": {
                                        "start": {
                                          "line": 6,
                                          "column": 15
                                        },
                                        "end": {
                                          "line": 8,
                                          "column": 9
                                        }
                                      },
                                      "id": null,
                                      "generator": false,
                                      "expression": false,
                                      "async": false,
                                      "params": [],
                                      "body": {
                                        "type": "BlockStatement",
                                        "start": 215,
                                        "end": 273,
                                        "loc": {
                                          "start": {
                                            "line": 6,
                                            "column": 26
                                          },
                                          "end": {
                                            "line": 8,
                                            "column": 9
                                          }
                                        },
                                        "body": [
                                          {
                                            "type": "ExpressionStatement",
                                            "start": 230,
                                            "end": 262,
                                            "loc": {
                                              "start": {
                                                "line": 7,
                                                "column": 12
                                              },
                                              "end": {
                                                "line": 7,
                                                "column": 44
                                              }
                                            },
                                            "expression": {
                                              "type": "AssignmentExpression",
                                              "start": 230,
                                              "end": 261,
                                              "loc": {
                                                "start": {
                                                  "line": 7,
                                                  "column": 12
                                                },
                                                "end": {
                                                  "line": 7,
                                                  "column": 43
                                                }
                                              },
                                              "operator": "=",
                                              "left": {
                                                "type": "Identifier",
                                                "start": 230,
                                                "end": 236,
                                                "loc": {
                                                  "start": {
                                                    "line": 7,
                                                    "column": 12
                                                  },
                                                  "end": {
                                                    "line": 7,
                                                    "column": 18
                                                  },
                                                  "identifierName": "bundle"
                                                },
                                                "name": "bundle"
                                              },
                                              "right": {
                                                "type": "CallExpression",
                                                "start": 239,
                                                "end": 261,
                                                "loc": {
                                                  "start": {
                                                    "line": 7,
                                                    "column": 21
                                                  },
                                                  "end": {
                                                    "line": 7,
                                                    "column": 43
                                                  }
                                                },
                                                "callee": {
                                                  "type": "MemberExpression",
                                                  "start": 239,
                                                  "end": 259,
                                                  "loc": {
                                                    "start": {
                                                      "line": 7,
                                                      "column": 21
                                                    },
                                                    "end": {
                                                      "line": 7,
                                                      "column": 41
                                                    }
                                                  },
                                                  "object": {
                                                    "type": "Identifier",
                                                    "start": 239,
                                                    "end": 244,
                                                    "loc": {
                                                      "start": {
                                                        "line": 7,
                                                        "column": 21
                                                      },
                                                      "end": {
                                                        "line": 7,
                                                        "column": 26
                                                      },
                                                      "identifierName": "ogapi"
                                                    },
                                                    "name": "ogapi"
                                                  },
                                                  "property": {
                                                    "type": "Identifier",
                                                    "start": 245,
                                                    "end": 259,
                                                    "loc": {
                                                      "start": {
                                                        "line": 7,
                                                        "column": 27
                                                      },
                                                      "end": {
                                                        "line": 7,
                                                        "column": 41
                                                      },
                                                      "identifierName": "bundlesBuilder"
                                                    },
                                                    "name": "bundlesBuilder"
                                                  },
                                                  "computed": false
                                                },
                                                "arguments": []
                                              }
                                            }
                                          }
                                        ],
                                        "directives": []
                                      }
                                    }
                                  ]
                                },
                                "trailingComments": [
                                  {
                                    "type": "CommentBlock",
                                    "value": "* @test {InternalOpenGateAPI#bundlesBuilder} ",
                                    "start": 285,
                                    "end": 334,
                                    "loc": {
                                      "start": {
                                        "line": 9,
                                        "column": 8
                                      },
                                      "end": {
                                        "line": 9,
                                        "column": 57
                                      }
                                    }
                                  },
                                  {
                                    "type": "CommentBlock",
                                    "value": "describe('Check basic parameters:', function() {\r\n\r\n            it('Name is not a String', function() {\r\n                assert.throws(function() {\r\n                    ogapi.bundlesBuilder().withName(11);\r\n                }, \"Parameter name must be a string and has a maximum length of 255\");\r\n\r\n            });\r\n\r\n            it('version is not a String', function() {\r\n                assert.throws(function() {\r\n                    ogapi.bundlesBuilder().withVersion(1);\r\n                }, \"Parameter version must be a string and has a maximum length of 50\");\r\n\r\n            });\r\n\r\n            it('Hardware is not a String', function() {\r\n                assert.throws(function() {\r\n                    ogapi.bundlesBuilder().withHardware(1);\r\n                }, \"Parameter hardware must be a string\");\r\n\r\n            });\r\n\r\n            it('workgroup is not a String', function() {\r\n                assert.throws(function() {\r\n                    ogapi.bundlesBuilder().withWorkgroup(1);\r\n                }, \"Parameter workgroup must be a string\");\r\n\r\n            });\r\n\r\n            it('description is not a String', function() {\r\n                assert.throws(function() {\r\n                    ogapi.bundlesBuilder().withDescription(1);\r\n                }, \"Parameter description must be a string and has a maximum length of 250\");\r\n\r\n            });\r\n\r\n            it('UserNotes is not a String', function() {\r\n                assert.throws(function() {\r\n                    ogapi.bundlesBuilder().withUserNotes(1);\r\n                }, \"Parameter notes must be a string and has a maximum length of 250\");\r\n\r\n            });\r\n\r\n            it('POSTACTION is not an Array', function() {\r\n                assert.throws(function() {\r\n                    ogapi.bundlesBuilder().withPreaction(\"\");\r\n                }, \"Parameter preaction must be typeof Array\");\r\n\r\n            });\r\n\r\n            it('POSTACTION does not have at least one element', function() {\r\n                assert.doesNotThrow(function() {\r\n                    ogapi.bundlesBuilder().withPreaction([]);\r\n                });\r\n\r\n            });\r\n\r\n            it('POSTACTION does not have correct Elements', function() {\r\n                assert.throws(function() {\r\n                    ogapi.bundlesBuilder().withPreaction([\"dd\"]);\r\n                }, 'Any action into parameter preaction is not allowed. Parameter value <\\'[\"dd\"]\\'>, preaction allowed <\\'[\"HARDWARE_RESET\",\"SOFTWARE_RESET\",\"COMMS_DOWN\",\"COMMS_UP\",\"COMMS_RESET\"]\\'>');\r\n\r\n            });\r\n\r\n            it('POSTACTION have correct Elements', function() {\r\n                assert.doesNotThrow(function() {\r\n                    ogapi.bundlesBuilder().withPreaction([\"HARDWARE_RESET\", \"SOFTWARE_RESET\", \"COMMS_DOWN\", \"COMMS_UP\", \"COMMS_RESET\"]);\r\n                });\r\n            });\r\n\r\n\r\n            it('Required parameters', function() {\r\n                assert.throws(function() {\r\n                    ogapi.bundlesBuilder().create();\r\n                }, \"Parameters name, version, hardware, workgroup  must be defined\");\r\n            });\r\n\r\n            it('Check parameters type', function() {\r\n                assert.throws(function() {\r\n                    ogapi.bundlesBuilder().withName(222);\r\n                }, \"Parameter name must be a string\");\r\n            });\r\n        });\r\n        describe('Create a Bundle:', function() {\r\n\r\n            before(function() {\r\n                bundle.withName('bundle_testing').withVersion('V1').withWorkgroup('baseWorkGroup');\r\n            });\r\n\r\n            it('Check basic parameters', function() {\r\n                assert.throws(function() {\r\n                    bundle.create();\r\n                }, \"Parameters name, version, hardware, workgroup  must be defined\");\r\n            });\r\n\r\n            it('Create a bundle without Hardware', function() {\r\n                assert.throws(function() {\r\n                    bundle.create();\r\n                }, \"Parameters name, version, hardware, workgroup  must be defined\");\r\n            });\r\n\r\n            it('Create a bundle', function() {\r\n                assert.doesNotThrow(function() {\r\n                    bundle.withHardware(\"OWA21\").create();\r\n                });\r\n            });\r\n            it('Activate a bundle', function() {\r\n                assert.doesNotThrow(function() {\r\n                    bundle.activate();\r\n                });\r\n            });\r\n            /*\r\n             it('Delete a bundle', function() {\r\n                assert.doesNotThrow(function() {\r\n                    bundle.delete();\r\n                });\r\n                \r\n            });",
                                    "start": 344,
                                    "end": 4954,
                                    "loc": {
                                      "start": {
                                        "line": 10,
                                        "column": 8
                                      },
                                      "end": {
                                        "line": 128,
                                        "column": 17
                                      }
                                    }
                                  }
                                ]
                              }
                            ],
                            "directives": []
                          }
                        }
                      ],
                      "leadingComments": null,
                      "_esdocTestId": 11,
                      "_esdocTestName": "describe11"
                    },
                    "leadingComments": [
                      {
                        "type": "CommentBlock",
                        "value": "* @test {InternalOpenGateAPI#bundlesBuilder()} ",
                        "start": 50,
                        "end": 101,
                        "loc": {
                          "start": {
                            "line": 3,
                            "column": 4
                          },
                          "end": {
                            "line": 3,
                            "column": 55
                          }
                        }
                      }
                    ],
                    "trailingComments": [
                      {
                        "type": "CommentBlock",
                        "value": " describe('Check Deployment Element:', function() {\r\n\r\n            it('Check constructor Deployment Element', function() {\r\n                assert.throws(function() {\r\n                    ogapi.bundlesBuilder().addDeploymentElement();\r\n                }, \"Parameters name, version must be defined\");\r\n            });\r\n\r\n            it('Deploy element', function() {\r\n                assert.doesNotThrow(function() {\r\n                    ogapi.bundlesBuilder().withName('bundle_testing').withVersion('V1').addDeploymentElement();\r\n                });\r\n            });\r\n            describe('Check Deployment Element basic elements:', function() {\r\n                var deploymentElement;\r\n                before(function() {\r\n                    deploymentElement = ogapi.bundlesBuilder().withName('bundle_testing').withVersion('V1').addDeploymentElement();\r\n                });\r\n\r\n                it('Check parameter name', function() {\r\n                    assert.throws(function() {\r\n                        deploymentElement.withName(111);\r\n                    }, \"Parameter name must be a string and has a maximum length of 50\");\r\n                });\r\n                it('Check parameter version', function() {\r\n                    assert.throws(function() {\r\n                        deploymentElement.withVersion(111);\r\n                    }, \"Parameter version must be a string and has a maximum length of 50\");\r\n                });\r\n                it('Check parameter Type', function() {\r\n                    assert.throws(function() {\r\n                        deploymentElement.withType(111);\r\n                    }, \"Parameter type must be typeof string\");\r\n                });\r\n                it('Check parameter Type', function() {\r\n                    assert.throws(function() {\r\n                        deploymentElement.withType(\"Type\");\r\n                    }, 'Parameter type is not allowed. Parameter value <\\'\"Type\"\\'>, type allowed <\\'[\"SOFTWARE\",\"FIRMWARE\",\"CONFIGURATION\",\"PARAMETERS\"]\\'>');\r\n                });\r\n                it('Check parameter Path', function() {\r\n                    assert.throws(function() {\r\n                        deploymentElement.withPath(111);\r\n                    }, \"Parameter path must be a string\");\r\n                });\r\n                it('Check parameter Order', function() {\r\n                    assert.doesNotThrow(function() {\r\n                        deploymentElement.withOrder(111);\r\n                    });\r\n                });\r\n                it('Check parameter Operation', function() {\r\n                    assert.throws(function() {\r\n                        deploymentElement.withOperation(111);\r\n                    }, \"Parameter operation must be typeof string\");\r\n                });\r\n                it('Check parameter Operation', function() {\r\n                    assert.throws(function() {\r\n                        deploymentElement.withOperation(\"OPERATION\");\r\n                    }, 'Parameter operation is not allowed. Parameter value <\\'\"OPERATION\"\\'>, operation allowed <\\'[\"INSTALL\",\"UNINSTALL\",\"UPGRADE\"]\\'>');\r\n                });\r\n                it('Check parameter Option', function() {\r\n                    assert.throws(function() {\r\n                        deploymentElement.withOption(111);\r\n                    }, \"Parameter option must be typeof string\");\r\n                });\r\n                it('Check parameter Option', function() {\r\n                    assert.throws(function() {\r\n                        deploymentElement.withOption(\"option\");\r\n                    }, 'Parameter option is not allowed. Parameter value <\\'\"option\"\\'>, option allowed <\\'[\"MANDATORY\",\"OPTIONAL\"]\\'>');\r\n                });\r\n                it('Check parameter Validator is an Array', function() {\r\n                    assert.throws(function() {\r\n                        deploymentElement.withValidators(\"\");\r\n                    }, 'Parameter validators must be typeof Array');\r\n                });\r\n                it('Check parameter Validator have at least one element', function() {\r\n                    assert.doesNotThrow(function() {\r\n                        deploymentElement.withValidators([]);\r\n                    });\r\n                });\r\n\r\n                it('Check parameter type in validator is a string', function() {\r\n                    var validators = [{\r\n                        type: 1,\r\n                        value: \"\",\r\n                        mode: \"\"\r\n                    }];\r\n\r\n                    assert.throws(function() {\r\n                        deploymentElement.withValidators(validators);\r\n                    }, 'Parameter type must be typeof string');\r\n                });\r\n                it('Check parameter type in validator have a correct value', function() {\r\n\r\n                    var validators = [{\r\n                        type: \"SHA-1\"\r\n                    }];\r\n\r\n                    assert.doesNotThrow(function() {\r\n                        deploymentElement.withValidators(validators);\r\n                    });\r\n                });\r\n                it('Check parameter type in validator is typeof string', function() {\r\n\r\n                    var validators = [{\r\n                        type: \"SHA-1\",\r\n                        value: 1\r\n                    }];\r\n\r\n                    assert.throws(function() {\r\n                        deploymentElement.withValidators(validators);\r\n                    }, 'Parameter value must be a string');\r\n                });\r\n                it('Check parameter mode in validator is typeof string', function() {\r\n\r\n                    var validators = [{\r\n                        type: \"SHA-1\",\r\n                        value: \"\",\r\n                        mode: 1\r\n                    }];\r\n\r\n                    assert.throws(function() {\r\n                        deploymentElement.withValidators(validators);\r\n                    }, 'Parameter mode must be a string');\r\n                });\r\n\r\n                it('Check parameter mode in validator is typeof string', function() {\r\n\r\n                    var validators = [{\r\n                        type: \"SHA-1\",\r\n                        value: \"\",\r\n                        mode: \"\"\r\n                    }, {\r\n                        type: \"MD5\",\r\n                        value: \"\",\r\n                        mode: 1\r\n                    }];\r\n\r\n                    assert.throws(function() {\r\n                        deploymentElement.withValidators(validators);\r\n                    }, 'Parameter mode must be a string');\r\n                });\r\n\r\n                it('Check parameter DownloadUrl', function() {\r\n                    assert.throws(function() {\r\n                        deploymentElement.withDownloadUrl(111);\r\n                    }, \"Parameter downloadUrl must be a string\");\r\n                });\r\n                it('Check parameter FileName', function() {\r\n                    assert.throws(function() {\r\n                        deploymentElement.withFileName(111);\r\n                    }, \"Parameter fileName must be a string\");\r\n                });\r\n            });\r\n            describe('Check DeploymentElement basic elements:', function() {\r\n                var deploymentElement;\r\n                before(function() {\r\n                    bundle = ogapi.bundlesBuilder();\r\n                    bundle.withName('bundle_testing_2').withVersion('V1').withWorkgroup('baseWorkGroup').withHardware(\"OWA21\");\r\n                    try {\r\n                        bundle.delete();\r\n                    } catch (error) {\r\n\r\n                    };\r\n                    bundle.create();\r\n                    deploymentElement = bundle.addDeploymentElement();\r\n                });\r\n\r\n                it('Define a deployment element', function() {\r\n                    assert.throws(function() {\r\n                        deploymentElement.withName(1);\r\n                    }, \"Parameter name must be a string\");\r\n                });\r\n                it('Create a deployment element', function() {\r\n                    assert.throws(function() {\r\n                        deploymentElement.withVersion(\"bundles-file-example\").create();\r\n                    }, \"Method not allowed - You must define the basic element [name, version, type, path, order and operation]\");\r\n                });\r\n                it('Check urls:', function() {\r\n                    assert.strictEqual(deploymentElement._url, 'provision/bundles/bundle_testing_2/versions/V1/deploymentElements');\r\n                });\r\n\r\n                it('Create a deployment element', function() {\r\n                    var file = new Blob([\"bundle ejemplo\"], {\r\n                        type: 'text/plain'\r\n                    });\r\n                    assert.doesNotThrow(function() {\r\n                        deploymentElement.withName(\"file_1\").withVersion(\"1\").withType(\"SOFTWARE\")\r\n                            .withPath(\"/\").withOrder(\"1\").withOperation(\"INSTALL\").withDownloadUrl(\"/\")\r\n                            .withValidators([{ \"type\": \"SHA-1\", \"value\": \"123\" }]).withOption(\"OPTIONAL\").create(file);\r\n                    });\r\n                    bundle.activate();\r\n\r\n                });\r\n            });\r\n\r\n        });\r\n\r\n\r\n    });",
                        "start": 4971,
                        "end": 14201,
                        "loc": {
                          "start": {
                            "line": 131,
                            "column": 4
                          },
                          "end": {
                            "line": 329,
                            "column": 9
                          }
                        }
                      }
                    ]
                  }
                ],
                "directives": []
              }
            }
          ]
        }
      }
    ],
    "directives": []
  },
  "comments": [
    {
      "type": "CommentBlock",
      "value": "* @test {InternalOpenGateAPI#bundlesBuilder()} ",
      "start": 50,
      "end": 101,
      "loc": {
        "start": {
          "line": 3,
          "column": 4
        },
        "end": {
          "line": 3,
          "column": 55
        }
      }
    },
    {
      "type": "CommentBlock",
      "value": "* @test {InternalOpenGateAPI#bundlesBuilder} ",
      "start": 285,
      "end": 334,
      "loc": {
        "start": {
          "line": 9,
          "column": 8
        },
        "end": {
          "line": 9,
          "column": 57
        }
      }
    },
    {
      "type": "CommentBlock",
      "value": "describe('Check basic parameters:', function() {\r\n\r\n            it('Name is not a String', function() {\r\n                assert.throws(function() {\r\n                    ogapi.bundlesBuilder().withName(11);\r\n                }, \"Parameter name must be a string and has a maximum length of 255\");\r\n\r\n            });\r\n\r\n            it('version is not a String', function() {\r\n                assert.throws(function() {\r\n                    ogapi.bundlesBuilder().withVersion(1);\r\n                }, \"Parameter version must be a string and has a maximum length of 50\");\r\n\r\n            });\r\n\r\n            it('Hardware is not a String', function() {\r\n                assert.throws(function() {\r\n                    ogapi.bundlesBuilder().withHardware(1);\r\n                }, \"Parameter hardware must be a string\");\r\n\r\n            });\r\n\r\n            it('workgroup is not a String', function() {\r\n                assert.throws(function() {\r\n                    ogapi.bundlesBuilder().withWorkgroup(1);\r\n                }, \"Parameter workgroup must be a string\");\r\n\r\n            });\r\n\r\n            it('description is not a String', function() {\r\n                assert.throws(function() {\r\n                    ogapi.bundlesBuilder().withDescription(1);\r\n                }, \"Parameter description must be a string and has a maximum length of 250\");\r\n\r\n            });\r\n\r\n            it('UserNotes is not a String', function() {\r\n                assert.throws(function() {\r\n                    ogapi.bundlesBuilder().withUserNotes(1);\r\n                }, \"Parameter notes must be a string and has a maximum length of 250\");\r\n\r\n            });\r\n\r\n            it('POSTACTION is not an Array', function() {\r\n                assert.throws(function() {\r\n                    ogapi.bundlesBuilder().withPreaction(\"\");\r\n                }, \"Parameter preaction must be typeof Array\");\r\n\r\n            });\r\n\r\n            it('POSTACTION does not have at least one element', function() {\r\n                assert.doesNotThrow(function() {\r\n                    ogapi.bundlesBuilder().withPreaction([]);\r\n                });\r\n\r\n            });\r\n\r\n            it('POSTACTION does not have correct Elements', function() {\r\n                assert.throws(function() {\r\n                    ogapi.bundlesBuilder().withPreaction([\"dd\"]);\r\n                }, 'Any action into parameter preaction is not allowed. Parameter value <\\'[\"dd\"]\\'>, preaction allowed <\\'[\"HARDWARE_RESET\",\"SOFTWARE_RESET\",\"COMMS_DOWN\",\"COMMS_UP\",\"COMMS_RESET\"]\\'>');\r\n\r\n            });\r\n\r\n            it('POSTACTION have correct Elements', function() {\r\n                assert.doesNotThrow(function() {\r\n                    ogapi.bundlesBuilder().withPreaction([\"HARDWARE_RESET\", \"SOFTWARE_RESET\", \"COMMS_DOWN\", \"COMMS_UP\", \"COMMS_RESET\"]);\r\n                });\r\n            });\r\n\r\n\r\n            it('Required parameters', function() {\r\n                assert.throws(function() {\r\n                    ogapi.bundlesBuilder().create();\r\n                }, \"Parameters name, version, hardware, workgroup  must be defined\");\r\n            });\r\n\r\n            it('Check parameters type', function() {\r\n                assert.throws(function() {\r\n                    ogapi.bundlesBuilder().withName(222);\r\n                }, \"Parameter name must be a string\");\r\n            });\r\n        });\r\n        describe('Create a Bundle:', function() {\r\n\r\n            before(function() {\r\n                bundle.withName('bundle_testing').withVersion('V1').withWorkgroup('baseWorkGroup');\r\n            });\r\n\r\n            it('Check basic parameters', function() {\r\n                assert.throws(function() {\r\n                    bundle.create();\r\n                }, \"Parameters name, version, hardware, workgroup  must be defined\");\r\n            });\r\n\r\n            it('Create a bundle without Hardware', function() {\r\n                assert.throws(function() {\r\n                    bundle.create();\r\n                }, \"Parameters name, version, hardware, workgroup  must be defined\");\r\n            });\r\n\r\n            it('Create a bundle', function() {\r\n                assert.doesNotThrow(function() {\r\n                    bundle.withHardware(\"OWA21\").create();\r\n                });\r\n            });\r\n            it('Activate a bundle', function() {\r\n                assert.doesNotThrow(function() {\r\n                    bundle.activate();\r\n                });\r\n            });\r\n            /*\r\n             it('Delete a bundle', function() {\r\n                assert.doesNotThrow(function() {\r\n                    bundle.delete();\r\n                });\r\n                \r\n            });",
      "start": 344,
      "end": 4954,
      "loc": {
        "start": {
          "line": 10,
          "column": 8
        },
        "end": {
          "line": 128,
          "column": 17
        }
      }
    },
    {
      "type": "CommentBlock",
      "value": " describe('Check Deployment Element:', function() {\r\n\r\n            it('Check constructor Deployment Element', function() {\r\n                assert.throws(function() {\r\n                    ogapi.bundlesBuilder().addDeploymentElement();\r\n                }, \"Parameters name, version must be defined\");\r\n            });\r\n\r\n            it('Deploy element', function() {\r\n                assert.doesNotThrow(function() {\r\n                    ogapi.bundlesBuilder().withName('bundle_testing').withVersion('V1').addDeploymentElement();\r\n                });\r\n            });\r\n            describe('Check Deployment Element basic elements:', function() {\r\n                var deploymentElement;\r\n                before(function() {\r\n                    deploymentElement = ogapi.bundlesBuilder().withName('bundle_testing').withVersion('V1').addDeploymentElement();\r\n                });\r\n\r\n                it('Check parameter name', function() {\r\n                    assert.throws(function() {\r\n                        deploymentElement.withName(111);\r\n                    }, \"Parameter name must be a string and has a maximum length of 50\");\r\n                });\r\n                it('Check parameter version', function() {\r\n                    assert.throws(function() {\r\n                        deploymentElement.withVersion(111);\r\n                    }, \"Parameter version must be a string and has a maximum length of 50\");\r\n                });\r\n                it('Check parameter Type', function() {\r\n                    assert.throws(function() {\r\n                        deploymentElement.withType(111);\r\n                    }, \"Parameter type must be typeof string\");\r\n                });\r\n                it('Check parameter Type', function() {\r\n                    assert.throws(function() {\r\n                        deploymentElement.withType(\"Type\");\r\n                    }, 'Parameter type is not allowed. Parameter value <\\'\"Type\"\\'>, type allowed <\\'[\"SOFTWARE\",\"FIRMWARE\",\"CONFIGURATION\",\"PARAMETERS\"]\\'>');\r\n                });\r\n                it('Check parameter Path', function() {\r\n                    assert.throws(function() {\r\n                        deploymentElement.withPath(111);\r\n                    }, \"Parameter path must be a string\");\r\n                });\r\n                it('Check parameter Order', function() {\r\n                    assert.doesNotThrow(function() {\r\n                        deploymentElement.withOrder(111);\r\n                    });\r\n                });\r\n                it('Check parameter Operation', function() {\r\n                    assert.throws(function() {\r\n                        deploymentElement.withOperation(111);\r\n                    }, \"Parameter operation must be typeof string\");\r\n                });\r\n                it('Check parameter Operation', function() {\r\n                    assert.throws(function() {\r\n                        deploymentElement.withOperation(\"OPERATION\");\r\n                    }, 'Parameter operation is not allowed. Parameter value <\\'\"OPERATION\"\\'>, operation allowed <\\'[\"INSTALL\",\"UNINSTALL\",\"UPGRADE\"]\\'>');\r\n                });\r\n                it('Check parameter Option', function() {\r\n                    assert.throws(function() {\r\n                        deploymentElement.withOption(111);\r\n                    }, \"Parameter option must be typeof string\");\r\n                });\r\n                it('Check parameter Option', function() {\r\n                    assert.throws(function() {\r\n                        deploymentElement.withOption(\"option\");\r\n                    }, 'Parameter option is not allowed. Parameter value <\\'\"option\"\\'>, option allowed <\\'[\"MANDATORY\",\"OPTIONAL\"]\\'>');\r\n                });\r\n                it('Check parameter Validator is an Array', function() {\r\n                    assert.throws(function() {\r\n                        deploymentElement.withValidators(\"\");\r\n                    }, 'Parameter validators must be typeof Array');\r\n                });\r\n                it('Check parameter Validator have at least one element', function() {\r\n                    assert.doesNotThrow(function() {\r\n                        deploymentElement.withValidators([]);\r\n                    });\r\n                });\r\n\r\n                it('Check parameter type in validator is a string', function() {\r\n                    var validators = [{\r\n                        type: 1,\r\n                        value: \"\",\r\n                        mode: \"\"\r\n                    }];\r\n\r\n                    assert.throws(function() {\r\n                        deploymentElement.withValidators(validators);\r\n                    }, 'Parameter type must be typeof string');\r\n                });\r\n                it('Check parameter type in validator have a correct value', function() {\r\n\r\n                    var validators = [{\r\n                        type: \"SHA-1\"\r\n                    }];\r\n\r\n                    assert.doesNotThrow(function() {\r\n                        deploymentElement.withValidators(validators);\r\n                    });\r\n                });\r\n                it('Check parameter type in validator is typeof string', function() {\r\n\r\n                    var validators = [{\r\n                        type: \"SHA-1\",\r\n                        value: 1\r\n                    }];\r\n\r\n                    assert.throws(function() {\r\n                        deploymentElement.withValidators(validators);\r\n                    }, 'Parameter value must be a string');\r\n                });\r\n                it('Check parameter mode in validator is typeof string', function() {\r\n\r\n                    var validators = [{\r\n                        type: \"SHA-1\",\r\n                        value: \"\",\r\n                        mode: 1\r\n                    }];\r\n\r\n                    assert.throws(function() {\r\n                        deploymentElement.withValidators(validators);\r\n                    }, 'Parameter mode must be a string');\r\n                });\r\n\r\n                it('Check parameter mode in validator is typeof string', function() {\r\n\r\n                    var validators = [{\r\n                        type: \"SHA-1\",\r\n                        value: \"\",\r\n                        mode: \"\"\r\n                    }, {\r\n                        type: \"MD5\",\r\n                        value: \"\",\r\n                        mode: 1\r\n                    }];\r\n\r\n                    assert.throws(function() {\r\n                        deploymentElement.withValidators(validators);\r\n                    }, 'Parameter mode must be a string');\r\n                });\r\n\r\n                it('Check parameter DownloadUrl', function() {\r\n                    assert.throws(function() {\r\n                        deploymentElement.withDownloadUrl(111);\r\n                    }, \"Parameter downloadUrl must be a string\");\r\n                });\r\n                it('Check parameter FileName', function() {\r\n                    assert.throws(function() {\r\n                        deploymentElement.withFileName(111);\r\n                    }, \"Parameter fileName must be a string\");\r\n                });\r\n            });\r\n            describe('Check DeploymentElement basic elements:', function() {\r\n                var deploymentElement;\r\n                before(function() {\r\n                    bundle = ogapi.bundlesBuilder();\r\n                    bundle.withName('bundle_testing_2').withVersion('V1').withWorkgroup('baseWorkGroup').withHardware(\"OWA21\");\r\n                    try {\r\n                        bundle.delete();\r\n                    } catch (error) {\r\n\r\n                    };\r\n                    bundle.create();\r\n                    deploymentElement = bundle.addDeploymentElement();\r\n                });\r\n\r\n                it('Define a deployment element', function() {\r\n                    assert.throws(function() {\r\n                        deploymentElement.withName(1);\r\n                    }, \"Parameter name must be a string\");\r\n                });\r\n                it('Create a deployment element', function() {\r\n                    assert.throws(function() {\r\n                        deploymentElement.withVersion(\"bundles-file-example\").create();\r\n                    }, \"Method not allowed - You must define the basic element [name, version, type, path, order and operation]\");\r\n                });\r\n                it('Check urls:', function() {\r\n                    assert.strictEqual(deploymentElement._url, 'provision/bundles/bundle_testing_2/versions/V1/deploymentElements');\r\n                });\r\n\r\n                it('Create a deployment element', function() {\r\n                    var file = new Blob([\"bundle ejemplo\"], {\r\n                        type: 'text/plain'\r\n                    });\r\n                    assert.doesNotThrow(function() {\r\n                        deploymentElement.withName(\"file_1\").withVersion(\"1\").withType(\"SOFTWARE\")\r\n                            .withPath(\"/\").withOrder(\"1\").withOperation(\"INSTALL\").withDownloadUrl(\"/\")\r\n                            .withValidators([{ \"type\": \"SHA-1\", \"value\": \"123\" }]).withOption(\"OPTIONAL\").create(file);\r\n                    });\r\n                    bundle.activate();\r\n\r\n                });\r\n            });\r\n\r\n        });\r\n\r\n\r\n    });",
      "start": 4971,
      "end": 14201,
      "loc": {
        "start": {
          "line": 131,
          "column": 4
        },
        "end": {
          "line": 329,
          "column": 9
        }
      }
    }
  ],
  "tokens": [
    {
      "type": {
        "label": "name",
        "beforeExpr": false,
        "startsExpr": true,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null
      },
      "value": "define",
      "start": 0,
      "end": 6,
      "loc": {
        "start": {
          "line": 1,
          "column": 0
        },
        "end": {
          "line": 1,
          "column": 6
        }
      }
    },
    {
      "type": {
        "label": "(",
        "beforeExpr": true,
        "startsExpr": true,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null
      },
      "start": 6,
      "end": 7,
      "loc": {
        "start": {
          "line": 1,
          "column": 6
        },
        "end": {
          "line": 1,
          "column": 7
        }
      }
    },
    {
      "type": {
        "label": "function",
        "keyword": "function",
        "beforeExpr": false,
        "startsExpr": true,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null
      },
      "value": "function",
      "start": 7,
      "end": 15,
      "loc": {
        "start": {
          "line": 1,
          "column": 7
        },
        "end": {
          "line": 1,
          "column": 15
        }
      }
    },
    {
      "type": {
        "label": "(",
        "beforeExpr": true,
        "startsExpr": true,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null
      },
      "start": 15,
      "end": 16,
      "loc": {
        "start": {
          "line": 1,
          "column": 15
        },
        "end": {
          "line": 1,
          "column": 16
        }
      }
    },
    {
      "type": {
        "label": ")",
        "beforeExpr": false,
        "startsExpr": false,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null
      },
      "start": 16,
      "end": 17,
      "loc": {
        "start": {
          "line": 1,
          "column": 16
        },
        "end": {
          "line": 1,
          "column": 17
        }
      }
    },
    {
      "type": {
        "label": "{",
        "beforeExpr": true,
        "startsExpr": true,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null
      },
      "start": 18,
      "end": 19,
      "loc": {
        "start": {
          "line": 1,
          "column": 18
        },
        "end": {
          "line": 1,
          "column": 19
        }
      }
    },
    {
      "type": {
        "label": "name",
        "beforeExpr": false,
        "startsExpr": true,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null
      },
      "value": "mocha",
      "start": 25,
      "end": 30,
      "loc": {
        "start": {
          "line": 2,
          "column": 4
        },
        "end": {
          "line": 2,
          "column": 9
        }
      }
    },
    {
      "type": {
        "label": ".",
        "beforeExpr": false,
        "startsExpr": false,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null,
        "updateContext": null
      },
      "start": 30,
      "end": 31,
      "loc": {
        "start": {
          "line": 2,
          "column": 9
        },
        "end": {
          "line": 2,
          "column": 10
        }
      }
    },
    {
      "type": {
        "label": "name",
        "beforeExpr": false,
        "startsExpr": true,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null
      },
      "value": "setup",
      "start": 31,
      "end": 36,
      "loc": {
        "start": {
          "line": 2,
          "column": 10
        },
        "end": {
          "line": 2,
          "column": 15
        }
      }
    },
    {
      "type": {
        "label": "(",
        "beforeExpr": true,
        "startsExpr": true,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null
      },
      "start": 36,
      "end": 37,
      "loc": {
        "start": {
          "line": 2,
          "column": 15
        },
        "end": {
          "line": 2,
          "column": 16
        }
      }
    },
    {
      "type": {
        "label": "string",
        "beforeExpr": false,
        "startsExpr": true,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null,
        "updateContext": null
      },
      "value": "bdd",
      "start": 37,
      "end": 42,
      "loc": {
        "start": {
          "line": 2,
          "column": 16
        },
        "end": {
          "line": 2,
          "column": 21
        }
      }
    },
    {
      "type": {
        "label": ")",
        "beforeExpr": false,
        "startsExpr": false,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null
      },
      "start": 42,
      "end": 43,
      "loc": {
        "start": {
          "line": 2,
          "column": 21
        },
        "end": {
          "line": 2,
          "column": 22
        }
      }
    },
    {
      "type": {
        "label": ";",
        "beforeExpr": true,
        "startsExpr": false,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null,
        "updateContext": null
      },
      "start": 43,
      "end": 44,
      "loc": {
        "start": {
          "line": 2,
          "column": 22
        },
        "end": {
          "line": 2,
          "column": 23
        }
      }
    },
    {
      "type": "CommentBlock",
      "value": "* @test {InternalOpenGateAPI#bundlesBuilder()} ",
      "start": 50,
      "end": 101,
      "loc": {
        "start": {
          "line": 3,
          "column": 4
        },
        "end": {
          "line": 3,
          "column": 55
        }
      }
    },
    {
      "type": {
        "label": "name",
        "beforeExpr": false,
        "startsExpr": true,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null
      },
      "value": "describe",
      "start": 107,
      "end": 115,
      "loc": {
        "start": {
          "line": 4,
          "column": 4
        },
        "end": {
          "line": 4,
          "column": 12
        }
      }
    },
    {
      "type": {
        "label": "(",
        "beforeExpr": true,
        "startsExpr": true,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null
      },
      "start": 115,
      "end": 116,
      "loc": {
        "start": {
          "line": 4,
          "column": 12
        },
        "end": {
          "line": 4,
          "column": 13
        }
      }
    },
    {
      "type": {
        "label": "string",
        "beforeExpr": false,
        "startsExpr": true,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null,
        "updateContext": null
      },
      "value": "Check funcionality bundles module:",
      "start": 116,
      "end": 152,
      "loc": {
        "start": {
          "line": 4,
          "column": 13
        },
        "end": {
          "line": 4,
          "column": 49
        }
      }
    },
    {
      "type": {
        "label": ",",
        "beforeExpr": true,
        "startsExpr": false,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null,
        "updateContext": null
      },
      "start": 152,
      "end": 153,
      "loc": {
        "start": {
          "line": 4,
          "column": 49
        },
        "end": {
          "line": 4,
          "column": 50
        }
      }
    },
    {
      "type": {
        "label": "function",
        "keyword": "function",
        "beforeExpr": false,
        "startsExpr": true,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null
      },
      "value": "function",
      "start": 154,
      "end": 162,
      "loc": {
        "start": {
          "line": 4,
          "column": 51
        },
        "end": {
          "line": 4,
          "column": 59
        }
      }
    },
    {
      "type": {
        "label": "(",
        "beforeExpr": true,
        "startsExpr": true,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null
      },
      "start": 162,
      "end": 163,
      "loc": {
        "start": {
          "line": 4,
          "column": 59
        },
        "end": {
          "line": 4,
          "column": 60
        }
      }
    },
    {
      "type": {
        "label": ")",
        "beforeExpr": false,
        "startsExpr": false,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null
      },
      "start": 163,
      "end": 164,
      "loc": {
        "start": {
          "line": 4,
          "column": 60
        },
        "end": {
          "line": 4,
          "column": 61
        }
      }
    },
    {
      "type": {
        "label": "{",
        "beforeExpr": true,
        "startsExpr": true,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null
      },
      "start": 165,
      "end": 166,
      "loc": {
        "start": {
          "line": 4,
          "column": 62
        },
        "end": {
          "line": 4,
          "column": 63
        }
      }
    },
    {
      "type": {
        "label": "var",
        "keyword": "var",
        "beforeExpr": false,
        "startsExpr": false,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null,
        "updateContext": null
      },
      "value": "var",
      "start": 176,
      "end": 179,
      "loc": {
        "start": {
          "line": 5,
          "column": 8
        },
        "end": {
          "line": 5,
          "column": 11
        }
      }
    },
    {
      "type": {
        "label": "name",
        "beforeExpr": false,
        "startsExpr": true,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null
      },
      "value": "bundle",
      "start": 180,
      "end": 186,
      "loc": {
        "start": {
          "line": 5,
          "column": 12
        },
        "end": {
          "line": 5,
          "column": 18
        }
      }
    },
    {
      "type": {
        "label": ";",
        "beforeExpr": true,
        "startsExpr": false,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null,
        "updateContext": null
      },
      "start": 186,
      "end": 187,
      "loc": {
        "start": {
          "line": 5,
          "column": 18
        },
        "end": {
          "line": 5,
          "column": 19
        }
      }
    },
    {
      "type": {
        "label": "name",
        "beforeExpr": false,
        "startsExpr": true,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null
      },
      "value": "before",
      "start": 197,
      "end": 203,
      "loc": {
        "start": {
          "line": 6,
          "column": 8
        },
        "end": {
          "line": 6,
          "column": 14
        }
      }
    },
    {
      "type": {
        "label": "(",
        "beforeExpr": true,
        "startsExpr": true,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null
      },
      "start": 203,
      "end": 204,
      "loc": {
        "start": {
          "line": 6,
          "column": 14
        },
        "end": {
          "line": 6,
          "column": 15
        }
      }
    },
    {
      "type": {
        "label": "function",
        "keyword": "function",
        "beforeExpr": false,
        "startsExpr": true,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null
      },
      "value": "function",
      "start": 204,
      "end": 212,
      "loc": {
        "start": {
          "line": 6,
          "column": 15
        },
        "end": {
          "line": 6,
          "column": 23
        }
      }
    },
    {
      "type": {
        "label": "(",
        "beforeExpr": true,
        "startsExpr": true,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null
      },
      "start": 212,
      "end": 213,
      "loc": {
        "start": {
          "line": 6,
          "column": 23
        },
        "end": {
          "line": 6,
          "column": 24
        }
      }
    },
    {
      "type": {
        "label": ")",
        "beforeExpr": false,
        "startsExpr": false,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null
      },
      "start": 213,
      "end": 214,
      "loc": {
        "start": {
          "line": 6,
          "column": 24
        },
        "end": {
          "line": 6,
          "column": 25
        }
      }
    },
    {
      "type": {
        "label": "{",
        "beforeExpr": true,
        "startsExpr": true,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null
      },
      "start": 215,
      "end": 216,
      "loc": {
        "start": {
          "line": 6,
          "column": 26
        },
        "end": {
          "line": 6,
          "column": 27
        }
      }
    },
    {
      "type": {
        "label": "name",
        "beforeExpr": false,
        "startsExpr": true,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null
      },
      "value": "bundle",
      "start": 230,
      "end": 236,
      "loc": {
        "start": {
          "line": 7,
          "column": 12
        },
        "end": {
          "line": 7,
          "column": 18
        }
      }
    },
    {
      "type": {
        "label": "=",
        "beforeExpr": true,
        "startsExpr": false,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": true,
        "prefix": false,
        "postfix": false,
        "binop": null,
        "updateContext": null
      },
      "value": "=",
      "start": 237,
      "end": 238,
      "loc": {
        "start": {
          "line": 7,
          "column": 19
        },
        "end": {
          "line": 7,
          "column": 20
        }
      }
    },
    {
      "type": {
        "label": "name",
        "beforeExpr": false,
        "startsExpr": true,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null
      },
      "value": "ogapi",
      "start": 239,
      "end": 244,
      "loc": {
        "start": {
          "line": 7,
          "column": 21
        },
        "end": {
          "line": 7,
          "column": 26
        }
      }
    },
    {
      "type": {
        "label": ".",
        "beforeExpr": false,
        "startsExpr": false,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null,
        "updateContext": null
      },
      "start": 244,
      "end": 245,
      "loc": {
        "start": {
          "line": 7,
          "column": 26
        },
        "end": {
          "line": 7,
          "column": 27
        }
      }
    },
    {
      "type": {
        "label": "name",
        "beforeExpr": false,
        "startsExpr": true,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null
      },
      "value": "bundlesBuilder",
      "start": 245,
      "end": 259,
      "loc": {
        "start": {
          "line": 7,
          "column": 27
        },
        "end": {
          "line": 7,
          "column": 41
        }
      }
    },
    {
      "type": {
        "label": "(",
        "beforeExpr": true,
        "startsExpr": true,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null
      },
      "start": 259,
      "end": 260,
      "loc": {
        "start": {
          "line": 7,
          "column": 41
        },
        "end": {
          "line": 7,
          "column": 42
        }
      }
    },
    {
      "type": {
        "label": ")",
        "beforeExpr": false,
        "startsExpr": false,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null
      },
      "start": 260,
      "end": 261,
      "loc": {
        "start": {
          "line": 7,
          "column": 42
        },
        "end": {
          "line": 7,
          "column": 43
        }
      }
    },
    {
      "type": {
        "label": ";",
        "beforeExpr": true,
        "startsExpr": false,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null,
        "updateContext": null
      },
      "start": 261,
      "end": 262,
      "loc": {
        "start": {
          "line": 7,
          "column": 43
        },
        "end": {
          "line": 7,
          "column": 44
        }
      }
    },
    {
      "type": {
        "label": "}",
        "beforeExpr": false,
        "startsExpr": false,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null
      },
      "start": 272,
      "end": 273,
      "loc": {
        "start": {
          "line": 8,
          "column": 8
        },
        "end": {
          "line": 8,
          "column": 9
        }
      }
    },
    {
      "type": {
        "label": ")",
        "beforeExpr": false,
        "startsExpr": false,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null
      },
      "start": 273,
      "end": 274,
      "loc": {
        "start": {
          "line": 8,
          "column": 9
        },
        "end": {
          "line": 8,
          "column": 10
        }
      }
    },
    {
      "type": {
        "label": ";",
        "beforeExpr": true,
        "startsExpr": false,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null,
        "updateContext": null
      },
      "start": 274,
      "end": 275,
      "loc": {
        "start": {
          "line": 8,
          "column": 10
        },
        "end": {
          "line": 8,
          "column": 11
        }
      }
    },
    {
      "type": "CommentBlock",
      "value": "* @test {InternalOpenGateAPI#bundlesBuilder} ",
      "start": 285,
      "end": 334,
      "loc": {
        "start": {
          "line": 9,
          "column": 8
        },
        "end": {
          "line": 9,
          "column": 57
        }
      }
    },
    {
      "type": "CommentBlock",
      "value": "describe('Check basic parameters:', function() {\r\n\r\n            it('Name is not a String', function() {\r\n                assert.throws(function() {\r\n                    ogapi.bundlesBuilder().withName(11);\r\n                }, \"Parameter name must be a string and has a maximum length of 255\");\r\n\r\n            });\r\n\r\n            it('version is not a String', function() {\r\n                assert.throws(function() {\r\n                    ogapi.bundlesBuilder().withVersion(1);\r\n                }, \"Parameter version must be a string and has a maximum length of 50\");\r\n\r\n            });\r\n\r\n            it('Hardware is not a String', function() {\r\n                assert.throws(function() {\r\n                    ogapi.bundlesBuilder().withHardware(1);\r\n                }, \"Parameter hardware must be a string\");\r\n\r\n            });\r\n\r\n            it('workgroup is not a String', function() {\r\n                assert.throws(function() {\r\n                    ogapi.bundlesBuilder().withWorkgroup(1);\r\n                }, \"Parameter workgroup must be a string\");\r\n\r\n            });\r\n\r\n            it('description is not a String', function() {\r\n                assert.throws(function() {\r\n                    ogapi.bundlesBuilder().withDescription(1);\r\n                }, \"Parameter description must be a string and has a maximum length of 250\");\r\n\r\n            });\r\n\r\n            it('UserNotes is not a String', function() {\r\n                assert.throws(function() {\r\n                    ogapi.bundlesBuilder().withUserNotes(1);\r\n                }, \"Parameter notes must be a string and has a maximum length of 250\");\r\n\r\n            });\r\n\r\n            it('POSTACTION is not an Array', function() {\r\n                assert.throws(function() {\r\n                    ogapi.bundlesBuilder().withPreaction(\"\");\r\n                }, \"Parameter preaction must be typeof Array\");\r\n\r\n            });\r\n\r\n            it('POSTACTION does not have at least one element', function() {\r\n                assert.doesNotThrow(function() {\r\n                    ogapi.bundlesBuilder().withPreaction([]);\r\n                });\r\n\r\n            });\r\n\r\n            it('POSTACTION does not have correct Elements', function() {\r\n                assert.throws(function() {\r\n                    ogapi.bundlesBuilder().withPreaction([\"dd\"]);\r\n                }, 'Any action into parameter preaction is not allowed. Parameter value <\\'[\"dd\"]\\'>, preaction allowed <\\'[\"HARDWARE_RESET\",\"SOFTWARE_RESET\",\"COMMS_DOWN\",\"COMMS_UP\",\"COMMS_RESET\"]\\'>');\r\n\r\n            });\r\n\r\n            it('POSTACTION have correct Elements', function() {\r\n                assert.doesNotThrow(function() {\r\n                    ogapi.bundlesBuilder().withPreaction([\"HARDWARE_RESET\", \"SOFTWARE_RESET\", \"COMMS_DOWN\", \"COMMS_UP\", \"COMMS_RESET\"]);\r\n                });\r\n            });\r\n\r\n\r\n            it('Required parameters', function() {\r\n                assert.throws(function() {\r\n                    ogapi.bundlesBuilder().create();\r\n                }, \"Parameters name, version, hardware, workgroup  must be defined\");\r\n            });\r\n\r\n            it('Check parameters type', function() {\r\n                assert.throws(function() {\r\n                    ogapi.bundlesBuilder().withName(222);\r\n                }, \"Parameter name must be a string\");\r\n            });\r\n        });\r\n        describe('Create a Bundle:', function() {\r\n\r\n            before(function() {\r\n                bundle.withName('bundle_testing').withVersion('V1').withWorkgroup('baseWorkGroup');\r\n            });\r\n\r\n            it('Check basic parameters', function() {\r\n                assert.throws(function() {\r\n                    bundle.create();\r\n                }, \"Parameters name, version, hardware, workgroup  must be defined\");\r\n            });\r\n\r\n            it('Create a bundle without Hardware', function() {\r\n                assert.throws(function() {\r\n                    bundle.create();\r\n                }, \"Parameters name, version, hardware, workgroup  must be defined\");\r\n            });\r\n\r\n            it('Create a bundle', function() {\r\n                assert.doesNotThrow(function() {\r\n                    bundle.withHardware(\"OWA21\").create();\r\n                });\r\n            });\r\n            it('Activate a bundle', function() {\r\n                assert.doesNotThrow(function() {\r\n                    bundle.activate();\r\n                });\r\n            });\r\n            /*\r\n             it('Delete a bundle', function() {\r\n                assert.doesNotThrow(function() {\r\n                    bundle.delete();\r\n                });\r\n                \r\n            });",
      "start": 344,
      "end": 4954,
      "loc": {
        "start": {
          "line": 10,
          "column": 8
        },
        "end": {
          "line": 128,
          "column": 17
        }
      }
    },
    {
      "type": {
        "label": "}",
        "beforeExpr": false,
        "startsExpr": false,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null
      },
      "start": 4960,
      "end": 4961,
      "loc": {
        "start": {
          "line": 129,
          "column": 4
        },
        "end": {
          "line": 129,
          "column": 5
        }
      }
    },
    {
      "type": {
        "label": ")",
        "beforeExpr": false,
        "startsExpr": false,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null
      },
      "start": 4961,
      "end": 4962,
      "loc": {
        "start": {
          "line": 129,
          "column": 5
        },
        "end": {
          "line": 129,
          "column": 6
        }
      }
    },
    {
      "type": {
        "label": ";",
        "beforeExpr": true,
        "startsExpr": false,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null,
        "updateContext": null
      },
      "start": 4962,
      "end": 4963,
      "loc": {
        "start": {
          "line": 129,
          "column": 6
        },
        "end": {
          "line": 129,
          "column": 7
        }
      }
    },
    {
      "type": "CommentBlock",
      "value": " describe('Check Deployment Element:', function() {\r\n\r\n            it('Check constructor Deployment Element', function() {\r\n                assert.throws(function() {\r\n                    ogapi.bundlesBuilder().addDeploymentElement();\r\n                }, \"Parameters name, version must be defined\");\r\n            });\r\n\r\n            it('Deploy element', function() {\r\n                assert.doesNotThrow(function() {\r\n                    ogapi.bundlesBuilder().withName('bundle_testing').withVersion('V1').addDeploymentElement();\r\n                });\r\n            });\r\n            describe('Check Deployment Element basic elements:', function() {\r\n                var deploymentElement;\r\n                before(function() {\r\n                    deploymentElement = ogapi.bundlesBuilder().withName('bundle_testing').withVersion('V1').addDeploymentElement();\r\n                });\r\n\r\n                it('Check parameter name', function() {\r\n                    assert.throws(function() {\r\n                        deploymentElement.withName(111);\r\n                    }, \"Parameter name must be a string and has a maximum length of 50\");\r\n                });\r\n                it('Check parameter version', function() {\r\n                    assert.throws(function() {\r\n                        deploymentElement.withVersion(111);\r\n                    }, \"Parameter version must be a string and has a maximum length of 50\");\r\n                });\r\n                it('Check parameter Type', function() {\r\n                    assert.throws(function() {\r\n                        deploymentElement.withType(111);\r\n                    }, \"Parameter type must be typeof string\");\r\n                });\r\n                it('Check parameter Type', function() {\r\n                    assert.throws(function() {\r\n                        deploymentElement.withType(\"Type\");\r\n                    }, 'Parameter type is not allowed. Parameter value <\\'\"Type\"\\'>, type allowed <\\'[\"SOFTWARE\",\"FIRMWARE\",\"CONFIGURATION\",\"PARAMETERS\"]\\'>');\r\n                });\r\n                it('Check parameter Path', function() {\r\n                    assert.throws(function() {\r\n                        deploymentElement.withPath(111);\r\n                    }, \"Parameter path must be a string\");\r\n                });\r\n                it('Check parameter Order', function() {\r\n                    assert.doesNotThrow(function() {\r\n                        deploymentElement.withOrder(111);\r\n                    });\r\n                });\r\n                it('Check parameter Operation', function() {\r\n                    assert.throws(function() {\r\n                        deploymentElement.withOperation(111);\r\n                    }, \"Parameter operation must be typeof string\");\r\n                });\r\n                it('Check parameter Operation', function() {\r\n                    assert.throws(function() {\r\n                        deploymentElement.withOperation(\"OPERATION\");\r\n                    }, 'Parameter operation is not allowed. Parameter value <\\'\"OPERATION\"\\'>, operation allowed <\\'[\"INSTALL\",\"UNINSTALL\",\"UPGRADE\"]\\'>');\r\n                });\r\n                it('Check parameter Option', function() {\r\n                    assert.throws(function() {\r\n                        deploymentElement.withOption(111);\r\n                    }, \"Parameter option must be typeof string\");\r\n                });\r\n                it('Check parameter Option', function() {\r\n                    assert.throws(function() {\r\n                        deploymentElement.withOption(\"option\");\r\n                    }, 'Parameter option is not allowed. Parameter value <\\'\"option\"\\'>, option allowed <\\'[\"MANDATORY\",\"OPTIONAL\"]\\'>');\r\n                });\r\n                it('Check parameter Validator is an Array', function() {\r\n                    assert.throws(function() {\r\n                        deploymentElement.withValidators(\"\");\r\n                    }, 'Parameter validators must be typeof Array');\r\n                });\r\n                it('Check parameter Validator have at least one element', function() {\r\n                    assert.doesNotThrow(function() {\r\n                        deploymentElement.withValidators([]);\r\n                    });\r\n                });\r\n\r\n                it('Check parameter type in validator is a string', function() {\r\n                    var validators = [{\r\n                        type: 1,\r\n                        value: \"\",\r\n                        mode: \"\"\r\n                    }];\r\n\r\n                    assert.throws(function() {\r\n                        deploymentElement.withValidators(validators);\r\n                    }, 'Parameter type must be typeof string');\r\n                });\r\n                it('Check parameter type in validator have a correct value', function() {\r\n\r\n                    var validators = [{\r\n                        type: \"SHA-1\"\r\n                    }];\r\n\r\n                    assert.doesNotThrow(function() {\r\n                        deploymentElement.withValidators(validators);\r\n                    });\r\n                });\r\n                it('Check parameter type in validator is typeof string', function() {\r\n\r\n                    var validators = [{\r\n                        type: \"SHA-1\",\r\n                        value: 1\r\n                    }];\r\n\r\n                    assert.throws(function() {\r\n                        deploymentElement.withValidators(validators);\r\n                    }, 'Parameter value must be a string');\r\n                });\r\n                it('Check parameter mode in validator is typeof string', function() {\r\n\r\n                    var validators = [{\r\n                        type: \"SHA-1\",\r\n                        value: \"\",\r\n                        mode: 1\r\n                    }];\r\n\r\n                    assert.throws(function() {\r\n                        deploymentElement.withValidators(validators);\r\n                    }, 'Parameter mode must be a string');\r\n                });\r\n\r\n                it('Check parameter mode in validator is typeof string', function() {\r\n\r\n                    var validators = [{\r\n                        type: \"SHA-1\",\r\n                        value: \"\",\r\n                        mode: \"\"\r\n                    }, {\r\n                        type: \"MD5\",\r\n                        value: \"\",\r\n                        mode: 1\r\n                    }];\r\n\r\n                    assert.throws(function() {\r\n                        deploymentElement.withValidators(validators);\r\n                    }, 'Parameter mode must be a string');\r\n                });\r\n\r\n                it('Check parameter DownloadUrl', function() {\r\n                    assert.throws(function() {\r\n                        deploymentElement.withDownloadUrl(111);\r\n                    }, \"Parameter downloadUrl must be a string\");\r\n                });\r\n                it('Check parameter FileName', function() {\r\n                    assert.throws(function() {\r\n                        deploymentElement.withFileName(111);\r\n                    }, \"Parameter fileName must be a string\");\r\n                });\r\n            });\r\n            describe('Check DeploymentElement basic elements:', function() {\r\n                var deploymentElement;\r\n                before(function() {\r\n                    bundle = ogapi.bundlesBuilder();\r\n                    bundle.withName('bundle_testing_2').withVersion('V1').withWorkgroup('baseWorkGroup').withHardware(\"OWA21\");\r\n                    try {\r\n                        bundle.delete();\r\n                    } catch (error) {\r\n\r\n                    };\r\n                    bundle.create();\r\n                    deploymentElement = bundle.addDeploymentElement();\r\n                });\r\n\r\n                it('Define a deployment element', function() {\r\n                    assert.throws(function() {\r\n                        deploymentElement.withName(1);\r\n                    }, \"Parameter name must be a string\");\r\n                });\r\n                it('Create a deployment element', function() {\r\n                    assert.throws(function() {\r\n                        deploymentElement.withVersion(\"bundles-file-example\").create();\r\n                    }, \"Method not allowed - You must define the basic element [name, version, type, path, order and operation]\");\r\n                });\r\n                it('Check urls:', function() {\r\n                    assert.strictEqual(deploymentElement._url, 'provision/bundles/bundle_testing_2/versions/V1/deploymentElements');\r\n                });\r\n\r\n                it('Create a deployment element', function() {\r\n                    var file = new Blob([\"bundle ejemplo\"], {\r\n                        type: 'text/plain'\r\n                    });\r\n                    assert.doesNotThrow(function() {\r\n                        deploymentElement.withName(\"file_1\").withVersion(\"1\").withType(\"SOFTWARE\")\r\n                            .withPath(\"/\").withOrder(\"1\").withOperation(\"INSTALL\").withDownloadUrl(\"/\")\r\n                            .withValidators([{ \"type\": \"SHA-1\", \"value\": \"123\" }]).withOption(\"OPTIONAL\").create(file);\r\n                    });\r\n                    bundle.activate();\r\n\r\n                });\r\n            });\r\n\r\n        });\r\n\r\n\r\n    });",
      "start": 4971,
      "end": 14201,
      "loc": {
        "start": {
          "line": 131,
          "column": 4
        },
        "end": {
          "line": 329,
          "column": 9
        }
      }
    },
    {
      "type": {
        "label": "}",
        "beforeExpr": false,
        "startsExpr": false,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null
      },
      "start": 14203,
      "end": 14204,
      "loc": {
        "start": {
          "line": 330,
          "column": 0
        },
        "end": {
          "line": 330,
          "column": 1
        }
      }
    },
    {
      "type": {
        "label": ")",
        "beforeExpr": false,
        "startsExpr": false,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null
      },
      "start": 14204,
      "end": 14205,
      "loc": {
        "start": {
          "line": 330,
          "column": 1
        },
        "end": {
          "line": 330,
          "column": 2
        }
      }
    },
    {
      "type": {
        "label": ";",
        "beforeExpr": true,
        "startsExpr": false,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null,
        "updateContext": null
      },
      "start": 14205,
      "end": 14206,
      "loc": {
        "start": {
          "line": 330,
          "column": 2
        },
        "end": {
          "line": 330,
          "column": 3
        }
      }
    },
    {
      "type": {
        "label": "eof",
        "beforeExpr": false,
        "startsExpr": false,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null,
        "updateContext": null
      },
      "start": 14206,
      "end": 14206,
      "loc": {
        "start": {
          "line": 330,
          "column": 3
        },
        "end": {
          "line": 330,
          "column": 3
        }
      }
    }
  ]
}